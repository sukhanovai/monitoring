"""
Server Monitoring System v1.3.0
Copyright (c) 2024 Aleksandr Sukhanov
License: MIT
"""
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–∑–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ —Ç–∏–ø–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤
"""

from extensions.resource_check import get_linux_resources_improved, get_windows_resources_improved
from extensions.server_list import initialize_servers
from config import WINDOWS_SERVER_CREDENTIALS
import time

def progress_bar(percentage, width=20):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä"""
    filled = int(round(width * percentage / 100))
    return f"[{'‚ñà' * filled}{'‚ñë' * (width - filled)}] {percentage:.1f}%"

def check_windows_2025_servers(update_progress=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ Windows Server 2025 —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    servers = initialize_servers()
    windows_2025_ips = WINDOWS_SERVER_CREDENTIALS["windows_2025"]["servers"]

    target_servers = [s for s in servers if s["ip"] in windows_2025_ips and s["type"] == "rdp"]
    results = []

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Windows 2025 —Å–µ—Ä–≤–µ—Ä—ã: {len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")

    for i, server in enumerate(target_servers):
        if update_progress:
            progress = (i + 1) / len(target_servers) * 100
            update_progress(progress, f"‚è≥ {server['name']} ({server['ip']})")

        print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º {server['name']} ({server['ip']})")
        try:
            resources = get_windows_resources_improved(server["ip"], timeout=35)
            # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú, –ß–¢–û resources –ù–ï –ë–£–î–ï–¢ None
            if resources is None:
                resources = {
                    "cpu": 0.0,
                    "ram": 0.0, 
                    "disk": 0.0,
                    "status": "unavailable"
                }
            results.append({
                "server": server,
                "resources": resources,
                "success": resources is not None and resources.get("status") != "unavailable"
            })
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {server['ip']}: {e}")
            results.append({
                "server": server,
                "resources": {
                    "cpu": 0.0,
                    "ram": 0.0,
                    "disk": 0.0,
                    "status": "error",
                    "error": str(e)
                },
                "success": False
            })

        time.sleep(2)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

    return results, len(target_servers)

def check_domain_windows_servers(update_progress=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–º–µ–Ω–Ω—ã—Ö Windows —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    servers = initialize_servers()
    domain_ips = WINDOWS_SERVER_CREDENTIALS["domain_servers"]["servers"]

    target_servers = [s for s in servers if s["ip"] in domain_ips and s["type"] == "rdp"]
    results = []

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–º–µ–Ω–Ω—ã–µ Windows —Å–µ—Ä–≤–µ—Ä—ã: {len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")

    for i, server in enumerate(target_servers):
        if update_progress:
            progress = (i + 1) / len(target_servers) * 100
            update_progress(progress, f"‚è≥ {server['name']} ({server['ip']})")

        print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º {server['name']} ({server['ip']})")
        try:
            # –î–ª—è –¥–æ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å –º–µ–Ω—å—à–∏–º timeout
            resources = get_windows_resources_improved(server["ip"], timeout=15)
            
            # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú, –ß–¢–û resources –ù–ï –ë–£–î–ï–¢ None
            if resources is None:
                resources = {
                    "cpu": 0.0,
                    "ram": 0.0, 
                    "disk": 0.0,
                    "status": "unavailable",
                    "os": "Windows Server (unavailable)",
                    "access_method": "none",
                    "server_type": "domain_servers"
                }
                
            results.append({
                "server": server,
                "resources": resources,
                "success": resources is not None and resources.get("status") != "unavailable"
            })
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {server['ip']}: {e}")
            results.append({
                "server": server,
                "resources": {
                    "cpu": 0.0,
                    "ram": 0.0,
                    "disk": 0.0,
                    "status": "error",
                    "os": "Windows Server (error)",
                    "access_method": "error",
                    "server_type": "domain_servers",
                    "error": str(e)
                },
                "success": False
            })

        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        time.sleep(2)

    return results, len(target_servers)

def check_standard_windows_servers(update_progress=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω—ã—Ö Windows —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    servers = initialize_servers()
    standard_ips = WINDOWS_SERVER_CREDENTIALS["standard_windows"]["servers"]

    target_servers = [s for s in servers if s["ip"] in standard_ips and s["type"] == "rdp"]
    results = []

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Windows —Å–µ—Ä–≤–µ—Ä—ã: {len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")

    for i, server in enumerate(target_servers):
        if update_progress:
            progress = (i + 1) / len(target_servers) * 100
            update_progress(progress, f"‚è≥ {server['name']} ({server['ip']})")

        print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º {server['name']} ({server['ip']})")
        try:
            resources = get_windows_resources_improved(server["ip"], timeout=30)
            # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú, –ß–¢–û resources –ù–ï –ë–£–î–ï–¢ None
            if resources is None:
                resources = {
                    "cpu": 0.0,
                    "ram": 0.0, 
                    "disk": 0.0,
                    "status": "unavailable"
                }
            results.append({
                "server": server,
                "resources": resources,
                "success": resources is not None and resources.get("status") != "unavailable"
            })
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {server['ip']}: {e}")
            results.append({
                "server": server,
                "resources": {
                    "cpu": 0.0,
                    "ram": 0.0,
                    "disk": 0.0,
                    "status": "error",
                    "error": str(e)
                },
                "success": False
            })

        time.sleep(1)

    return results, len(target_servers)

def check_admin_windows_servers(update_progress=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Windows —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —É—á–µ—Ç–∫–æ–π Admin —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    servers = initialize_servers()
    admin_ips = WINDOWS_SERVER_CREDENTIALS["admin_servers"]["servers"]

    target_servers = [s for s in servers if s["ip"] in admin_ips and s["type"] == "rdp"]
    results = []

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Windows —Å–µ—Ä–≤–µ—Ä—ã (Admin): {len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")

    for i, server in enumerate(target_servers):
        if update_progress:
            progress = (i + 1) / len(target_servers) * 100
            update_progress(progress, f"‚è≥ {server['name']} ({server['ip']})")

        print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º {server['name']} ({server['ip']})")
        try:
            resources = get_windows_resources_improved(server["ip"], timeout=30)
            # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú, –ß–¢–û resources –ù–ï –ë–£–î–ï–¢ None
            if resources is None:
                resources = {
                    "cpu": 0.0,
                    "ram": 0.0, 
                    "disk": 0.0,
                    "status": "unavailable"
                }
            results.append({
                "server": server,
                "resources": resources,
                "success": resources is not None and resources.get("status") != "unavailable"
            })
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {server['ip']}: {e}")
            results.append({
                "server": server,
                "resources": {
                    "cpu": 0.0,
                    "ram": 0.0,
                    "disk": 0.0,
                    "status": "error",
                    "error": str(e)
                },
                "success": False
            })

        time.sleep(1)

    return results, len(target_servers)

def check_linux_servers(update_progress=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Linux —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º"""
    servers = initialize_servers()
    target_servers = [s for s in servers if s["type"] == "ssh"]
    results = []

    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Linux —Å–µ—Ä–≤–µ—Ä—ã: {len(target_servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")

    for i, server in enumerate(target_servers):
        if update_progress:
            progress = (i + 1) / len(target_servers) * 100
            update_progress(progress, f"‚è≥ {server['name']} ({server['ip']})")

        print(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º {server['name']} ({server['ip']})")
        try:
            resources = get_linux_resources_improved(server["ip"])
            # –ì–ê–†–ê–ù–¢–ò–†–£–ï–ú, –ß–¢–û resources –ù–ï –ë–£–î–ï–¢ None
            if resources is None:
                resources = {
                    "cpu": 0.0,
                    "ram": 0.0, 
                    "disk": 0.0,
                    "status": "unavailable"
                }
            results.append({
                "server": server,
                "resources": resources,
                "success": resources is not None and resources.get("status") != "unavailable"
            })
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {server['ip']}: {e}")
            results.append({
                "server": server,
                "resources": {
                    "cpu": 0.0,
                    "ram": 0.0,
                    "disk": 0.0,
                    "status": "error",
                    "error": str(e)
                },
                "success": False
            })

        time.sleep(0.5)

    return results, len(target_servers)

def check_all_servers_by_type(update_progress=None):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ç–∏–ø–∞–º"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ —Ç–∏–ø–∞–º...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Ç–∏–ø—ã Windows —Å–µ—Ä–≤–µ—Ä–æ–≤
    win2025_results, win2025_total = check_windows_2025_servers(update_progress)
    domain_results, domain_total = check_domain_windows_servers(update_progress)
    admin_results, admin_total = check_admin_windows_servers(update_progress)
    win_std_results, win_std_total = check_standard_windows_servers(update_progress)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Linux
    linux_results, linux_total = check_linux_servers(update_progress)

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = {
        "windows_2025": {
            "checked": win2025_total,
            "success": len([r for r in win2025_results if r["success"]]),
            "failed": len([r for r in win2025_results if not r["success"]])
        },
        "domain_windows": {
            "checked": domain_total,
            "success": len([r for r in domain_results if r["success"]]),
            "failed": len([r for r in domain_results if not r["success"]])
        },
        "admin_windows": {
            "checked": admin_total,
            "success": len([r for r in admin_results if r["success"]]),
            "failed": len([r for r in admin_results if not r["success"]])
        },
        "standard_windows": {
            "checked": win_std_total,
            "success": len([r for r in win_std_results if r["success"]]),
            "failed": len([r for r in win_std_results if not r["success"]])
        },
        "linux": {
            "checked": linux_total,
            "success": len([r for r in linux_results if r["success"]]),
            "failed": len([r for r in linux_results if not r["success"]])
        }
    }

    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    all_results = (win2025_results + domain_results + admin_results +
                   win_std_results + linux_results)

    return all_results, stats
