import re
import subprocess
import socket
from datetime import datetime
import sys
import os
sys.path.insert(0, '/opt/monitoring')

from config import SSH_KEY_PATH, SSH_USERNAME, RESOURCE_THRESHOLDS, WINDOWS_SERVER_CREDENTIALS, WINRM_CONFIGS

def check_port(ip, port, timeout=5):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(timeout)
        result = sock.connect_ex((ip, port))
        sock.close()
        return result == 0
    except:
        return False

def check_ping(ip):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ ping"""
    try:
        result = subprocess.run(['ping', '-c', '2', '-W', '2', ip], 
                              capture_output=True, text=True, timeout=10)
        return result.returncode == 0
    except:
        return False

def run_ssh_command(ip, command, timeout=10):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ SSH —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        cmd = f"timeout {timeout} ssh -o ConnectTimeout=8 -o BatchMode=yes -o StrictHostKeyChecking=no -i {SSH_KEY_PATH} {SSH_USERNAME}@{ip} '{command}'"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=timeout+2)
        return result.returncode == 0, result.stdout.strip(), result.stderr.strip()
    except subprocess.TimeoutExpired:
        return False, "", "Timeout"
    except Exception as e:
        return False, "", str(e)

def get_windows_server_credentials(ip):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è Windows —Å–µ—Ä–≤–µ—Ä–∞"""
    for server_type, config in WINDOWS_SERVER_CREDENTIALS.items():
        if ip in config["servers"]:
            print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º {server_type} —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ip}")
            return config["credentials"]
    
    # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ
    print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ip}")
    return WINRM_CONFIGS

def get_windows_disk_usage_standard(session):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö Windows —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    disk_commands = [
        'powershell -Command "$disk = Get-WmiObject -Class Win32_LogicalDisk -Filter \"DeviceID=\'C:\'\"; Write-Output \"SIZE:$($disk.Size) FREE:$($disk.FreeSpace)\""',
        'wmic logicaldisk where "DeviceID=\'C:\'" get Size,FreeSpace /value',
        'powershell -Command "Get-PSDrive C | Select-Object Used,Free"',
        'powershell -Command "(Get-CimInstance -ClassName Win32_LogicalDisk -Filter \"DeviceID=\'C:\'\").Size, (Get-CimInstance -ClassName Win32_LogicalDisk -Filter \"DeviceID=\'C:\'\").FreeSpace"'
    ]
    
    for disk_cmd in disk_commands:
        try:
            result = session.run_cmd(disk_cmd)
            if result.status_code == 0:
                output = result.std_out.decode('utf-8', errors='ignore').strip()
                print(f"üîç –ö–æ–º–∞–Ω–¥–∞ –¥–∏—Å–∫–∞: {disk_cmd[:60]}...")
                print(f"üîç –í—ã–≤–æ–¥: {output[:200]}")
                
                # –í–∞—Ä–∏–∞–Ω—Ç 1: –§–æ—Ä–º–∞—Ç SIZE:... FREE:...
                if "SIZE:" in output and "FREE:" in output:
                    try:
                        size_match = re.search(r'SIZE:(\d+)', output)
                        free_match = re.search(r'FREE:(\d+)', output)
                        if size_match and free_match:
                            size = int(size_match.group(1))
                            free = int(free_match.group(1))
                            if size > 0:
                                disk_usage = round((size - free) * 100.0 / size, 1)
                                print(f"‚úÖ Disk usage: {disk_usage}%")
                                return disk_usage
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SIZE/FREE: {e}")
                
                # –í–∞—Ä–∏–∞–Ω—Ç 2: –§–æ—Ä–º–∞—Ç WMIC (Size=... FreeSpace=...)
                elif "Size=" in output and "FreeSpace=" in output:
                    try:
                        size_match = re.search(r'Size=(\d+)', output)
                        free_match = re.search(r'FreeSpace=(\d+)', output)
                        if size_match and free_match:
                            size = int(size_match.group(1))
                            free = int(free_match.group(1))
                            if size > 0:
                                disk_usage = round((size - free) * 100.0 / size, 1)
                                print(f"‚úÖ Disk usage: {disk_usage}%")
                                return disk_usage
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WMIC: {e}")
                
                # –í–∞—Ä–∏–∞–Ω—Ç 3: –§–æ—Ä–º–∞—Ç Get-PSDrive (Used/Free)
                elif "Used" in output and "Free" in output:
                    try:
                        lines = [line.strip() for line in output.split('\n') if line.strip() and line.strip().isdigit()]
                        if len(lines) >= 2:
                            used = int(lines[0])
                            free = int(lines[1])
                            total = used + free
                            if total > 0:
                                disk_usage = round(used * 100.0 / total, 1)
                                print(f"‚úÖ Disk usage: {disk_usage}%")
                                return disk_usage
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PSDrive: {e}")
                
                # –í–∞—Ä–∏–∞–Ω—Ç 4: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –¥–≤—É—Ö –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
                else:
                    numbers = re.findall(r'\d+', output)
                    large_numbers = [int(n) for n in numbers if int(n) > 1000000000]  # > 1GB
                    if len(large_numbers) >= 2:
                        try:
                            size = max(large_numbers)
                            free = min(large_numbers)
                            if size > free:
                                disk_usage = round((size - free) * 100.0 / size, 1)
                                print(f"‚úÖ Disk usage (numbers): {disk_usage}%")
                                return disk_usage
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–∏—Å–µ–ª: {e}")
                        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–∏—Å–∫–∞: {e}")
            continue
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–∏—Å–∫–µ")
    return 0.0

def get_windows_disk_usage_windows2025(session):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è Windows Server 2025"""
    print("üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è Windows 2025")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Windows 2025
    disk_commands_2025 = [
        'powershell -Command "Get-Volume -DriveLetter C | Select-Object Size, SizeRemaining"',
        'powershell -Command "(Get-Volume -DriveLetter C).Size, (Get-Volume -DriveLetter C).SizeRemaining"',
        'powershell -Command "Get-CimInstance -ClassName Win32_LogicalDisk -Filter \"DeviceID=\'C:\'\" | Select-Object Size, FreeSpace"',
        'powershell -Command "Get-WmiObject -Class Win32_LogicalDisk -Filter \"DeviceID=\'C:\'\" | Select-Object Size, FreeSpace"'
    ]
    
    for disk_cmd in disk_commands_2025:
        try:
            result = session.run_cmd(disk_cmd)
            if result.status_code == 0:
                output = result.std_out.decode('utf-8', errors='ignore').strip()
                print(f"üîç –ö–æ–º–∞–Ω–¥–∞ 2025: {disk_cmd[:60]}...")
                print(f"üîç –í—ã–≤–æ–¥ 2025: {output[:200]}")
                
                # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ Windows 2025
                numbers = re.findall(r'\d+', output)
                large_numbers = [int(n) for n in numbers if int(n) > 1000000000]
                
                if len(large_numbers) >= 2:
                    try:
                        size = max(large_numbers)
                        free = min(large_numbers)
                        if size > free:
                            disk_usage = round((size - free) * 100.0 / size, 1)
                            print(f"‚úÖ Windows 2025 Disk usage: {disk_usage}%")
                            return disk_usage
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Windows 2025: {e}")
                        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã Windows 2025: {e}")
            continue
    
    # –ï—Å–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
    print("üîÑ –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è Windows 2025")
    return get_windows_disk_usage_standard(session)

def get_windows_disk_usage(session, ip):
    """–£–º–Ω—ã–π –≤—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ IP
    windows_2025_servers = WINDOWS_SERVER_CREDENTIALS["windows_2025"]["servers"]
    
    if ip in windows_2025_servers:
        return get_windows_disk_usage_windows2025(session)
    else:
        return get_windows_disk_usage_standard(session)

def get_windows_resources_optimized_old(ip, timeout=25):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö Windows —Å–µ—Ä–≤–µ—Ä–æ–≤ (2012, 2012 R2)"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π Windows —Å–µ—Ä–≤–µ—Ä {ip} (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    if not check_ping(ip):
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä {ip} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (ping failed)")
        return None

    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ RDP –ø–æ—Ä—Ç
    rdp_available = check_port(ip, 3389, 3)
    print(f"‚ÑπÔ∏è RDP –ø–æ—Ä—Ç: {'‚úÖ' if rdp_available else '‚ùå'}")

    # –ü—Ä–æ–±—É–µ–º WinRM –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    winrm_available = check_port(ip, 5985, 2)
    if winrm_available:
        try:
            import winrm
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º WinRM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {ip}...")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            creds_to_try = get_windows_server_credentials(ip)

            for config in creds_to_try:
                username = config["username"]
                password = config["password"]

                print(f"üîë –ü—Ä–æ–±—É–µ–º: {username}")

                try:
                    # –î–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ timeout
                    session = winrm.Session(
                        ip,
                        auth=(username, password),
                        transport='ntlm',
                        server_cert_validation='ignore',
                        read_timeout_sec=timeout + 10,
                        operation_timeout_sec=timeout
                    )

                    # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ - –ë–ï–ó timeout –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
                    result = session.run_cmd('echo %COMPUTERNAME%')
                    if result.status_code == 0:
                        print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è {ip}")

                        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
                        resources = get_windows_basic_resources_old(session, ip)
                        if resources:
                            resources["access_method"] = "WinRM"
                            resources["server_type"] = get_windows_server_type(ip)
                            return resources
                        else:
                            print(f"‚ö†Ô∏è –†–µ—Å—É—Ä—Å—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
                            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                            return {
                                "cpu": 0.0,
                                "ram": 0.0,
                                "disk": 0.0,
                                "load_avg": "N/A",
                                "uptime": "N/A",
                                "os": "Windows Server (old)",
                                "timestamp": datetime.now().strftime("%H:%M:%S"),
                                "status": "available",
                                "access_method": "WinRM",
                                "server_type": get_windows_server_type(ip)
                            }

                except Exception as e:
                    error_str = str(e)
                    if "Authentication" in error_str or "credentials" in error_str.lower():
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {username}")
                    elif "Operation timed out" in error_str or "read_timeout_sec" in error_str:
                        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç/–æ—à–∏–±–∫–∞ timeout –¥–ª—è {username} –Ω–∞ {ip}: {e}")
                        # –î–ª—è —Ç–∞–π–º–∞—É—Ç–æ–≤ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ fallback
                        break
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ WinRM –¥–ª—è {username}: {e}")
                    continue

            print("‚ö†Ô∏è –í—Å–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–æ—à–ª–∏ –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç—ã")

        except ImportError:
            print("‚ùå –ú–æ–¥—É–ª—å winrm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ WinRM: {e}")

    # –ï—Å–ª–∏ RDP –¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–∏–Ω–≥—É–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if rdp_available:
        print(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º RDP fallback –¥–ª—è {ip}")
        resources = get_windows_fallback_resources(ip, "RDP")
        if resources:
            resources["access_method"] = "RDP"
            resources["server_type"] = get_windows_server_type(ip)
        return resources

    # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–∏–Ω–≥—É–µ—Ç—Å—è, –Ω–æ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã
    print(f"‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä {ip} –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping")
    resources = get_windows_fallback_resources(ip, "Ping")
    if resources:
        resources["access_method"] = "Ping"
        resources["server_type"] = get_windows_server_type(ip)
    return resources

def get_windows_basic_resources_old(session, ip):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö Windows —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    try:
        cpu_usage = 0.0
        ram_usage = 0.0
        disk_usage = 0.0
        os_info = "Windows Server"

        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ (—Å–∞–º–∞—è –ø—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞)
        print("üîç –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ...")

        # –ü—Ä–æ–±—É–µ–º —Å–∞–º—É—é –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –û–° - –ë–ï–ó timeout
        result = session.run_cmd('ver')
        if result.status_code == 0:
            output = result.std_out.decode('utf-8', errors='ignore')
            if 'Microsoft' in output:
                os_info = output.strip()
                print(f"‚úÖ –û–°: {os_info}")

        # 2. –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU (—Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥)
        print("üîç –ü–æ–ª—É—á–∞–µ–º CPU (–ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥)...")
        result = session.run_cmd('wmic cpu get loadpercentage /value')
        if result.status_code == 0:
            output = result.std_out.decode('utf-8', errors='ignore')
            for line in output.split('\n'):
                if 'LoadPercentage' in line:
                    try:
                        cpu_usage = float(line.split('=')[1].strip())
                        print(f"‚úÖ CPU: {cpu_usage}%")
                        break
                    except:
                        pass

        # 3. –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM (–ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥)
        print("üîç –ü–æ–ª—É—á–∞–µ–º RAM (–ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥)...")
        result = session.run_cmd('systeminfo | find "Available Physical Memory"')
        if result.status_code == 0:
            output = result.std_out.decode('utf-8', errors='ignore')
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ systeminfo –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
            lines = output.split('\n')
            for line in lines:
                if 'Available Physical Memory' in line:
                    try:
                        # –§–æ—Ä–º–∞—Ç: "Available Physical Memory: 8,192 MB"
                        parts = line.split(':')
                        if len(parts) > 1:
                            available_mem_str = parts[1].strip()
                            # –£–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—ã–µ –∏ –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ
                            available_mem = int(available_mem_str.split()[0].replace(',', ''))

                            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –ø–∞–º—è—Ç—å
                            result_total = session.run_cmd('systeminfo | find "Total Physical Memory"')
                            if result_total.status_code == 0:
                                total_output = result_total.std_out.decode('utf-8', errors='ignore')
                                for total_line in total_output.split('\n'):
                                    if 'Total Physical Memory' in total_line:
                                        total_parts = total_line.split(':')
                                        if len(total_parts) > 1:
                                            total_mem_str = total_parts[1].strip()
                                            total_mem = int(total_mem_str.split()[0].replace(',', ''))

                                            if total_mem > 0:
                                                ram_usage = round((total_mem - available_mem) * 100.0 / total_mem, 1)
                                                print(f"‚úÖ RAM: {ram_usage}%")
                                                break
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RAM: {e}")

        # 4. –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ (–ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥)
        print("üîç –ü–æ–ª—É—á–∞–µ–º Disk (–ø—Ä–æ—Å—Ç–æ–π –º–µ—Ç–æ–¥)...")
        result = session.run_cmd('fsutil volume diskfree C:')
        if result.status_code == 0:
            output = result.std_out.decode('utf-8', errors='ignore')
            # –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ fsutil
            total_bytes = 0
            free_bytes = 0

            for line in output.split('\n'):
                if 'Total # of bytes' in line:
                    try:
                        total_bytes = int(line.split(':')[1].strip())
                    except:
                        pass
                elif 'Total # of free bytes' in line:
                    try:
                        free_bytes = int(line.split(':')[1].strip())
                    except:
                        pass

            if total_bytes > 0 and free_bytes > 0:
                used_bytes = total_bytes - free_bytes
                disk_usage = round(used_bytes * 100.0 / total_bytes, 1)
                print(f"‚úÖ Disk: {disk_usage}%")

        if cpu_usage > 0 or ram_usage > 0 or disk_usage > 0:
            print(f"‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏: CPU={cpu_usage}%, RAM={ram_usage}%, Disk={disk_usage}%")

            return {
                "cpu": cpu_usage,
                "ram": ram_usage,
                "disk": disk_usage,
                "load_avg": "N/A",
                "uptime": "N/A",
                "os": os_info,
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "status": "available"
            }
        else:
            print("‚ö†Ô∏è –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        return None

# –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–≤—Å–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
def get_windows_resources_simple_fallback(ip):
    """–û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π fallback –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö Windows —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback –¥–ª—è {ip}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    if not check_ping(ip):
        return None
        
    rdp_available = check_port(ip, 3389, 3)
    
    return {
        "cpu": 0.0,
        "ram": 0.0,
        "disk": 0.0,
        "load_avg": "N/A",
        "uptime": "N/A",
        "os": "Windows Server (fallback)",
        "timestamp": datetime.now().strftime("%H:%M:%S"),
        "status": "available" if rdp_available else "limited",
        "access_method": "RDP" if rdp_available else "Ping",
        "server_type": get_windows_server_type(ip)
    }

def get_windows_resources_improved(ip, timeout=30):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ Windows —Å–µ—Ä–≤–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∏ –≤–µ—Ä—Å–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Windows —Å–µ—Ä–≤–µ—Ä {ip}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞
    server_type = get_windows_server_type(ip)
    
    # –î–ª—è –¥–æ–º–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ (—Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ Windows) –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
    if server_type == "domain_servers":
        print(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–º–µ–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ {ip}")
        resources = get_windows_resources_optimized_old(ip, 15)  # –£–º–µ–Ω—å—à–∞–µ–º timeout –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤
        
        # –ï—Å–ª–∏ –¥–∞–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback
        if not resources:
            print(f"üîÑ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π fallback –¥–ª—è {ip}")
            resources = get_windows_resources_simple_fallback(ip)
            
        return resources
    
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥
    return get_windows_resources_standard(ip, timeout)

def get_windows_resources_standard(ip, timeout=30):
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö Windows —Å–µ—Ä–≤–µ—Ä–æ–≤"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Windows —Å–µ—Ä–≤–µ—Ä {ip} (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥)")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    if not check_ping(ip):
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä {ip} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (ping failed)")
        return None

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
    winrm_available = check_port(ip, 5985, 3)
    rdp_available = check_port(ip, 3389, 3)

    print(f"‚ÑπÔ∏è –ü–æ—Ä—Ç—ã: WinRM: {'‚úÖ' if winrm_available else '‚ùå'}, RDP: {'‚úÖ' if rdp_available else '‚ùå'}")

    # –ü—Ä–æ–±—É–µ–º WinRM –µ—Å–ª–∏ –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç
    if winrm_available:
        try:
            import winrm

            print(f"üîÑ –ü—Ä–æ–±—É–µ–º WinRM –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
            creds_to_try = get_windows_server_credentials(ip)

            for config in creds_to_try:
                username = config["username"]
                password = config["password"]

                print(f"üîë –ü—Ä–æ–±—É–µ–º: {username}")

                try:
                    session = winrm.Session(
                        ip,
                        auth=(username, password),
                        transport='ntlm',
                        server_cert_validation='ignore',
                        read_timeout_sec=timeout
                    )

                    # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
                    result = session.run_cmd('echo test')
                    if result.status_code == 0:
                        print(f"‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

                        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
                        resources = get_windows_resources_via_systeminfo(session, ip)
                        if resources:
                            resources["access_method"] = "WinRM"
                            resources["server_type"] = get_windows_server_type(ip)
                            return resources
                        else:
                            print(f"‚ö†Ô∏è –†–µ—Å—É—Ä—Å—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

                except Exception as e:
                    error_str = str(e)
                    if "Authentication" in error_str or "credentials" in error_str.lower():
                        print(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {username}")
                    elif "Operation timed out" in error_str:
                        print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –¥–ª—è {username}")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                    continue

            print("‚ö†Ô∏è –í—Å–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–¥–æ—à–ª–∏")

        except ImportError:
            print("‚ùå –ú–æ–¥—É–ª—å winrm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ WinRM: {e}")

    # –ï—Å–ª–∏ RDP –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    if rdp_available:
        print(f"‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º RDP fallback")
        resources = get_windows_fallback_resources(ip)
        if resources:
            resources["access_method"] = "RDP"
            resources["server_type"] = get_windows_server_type(ip)
        return resources

    # –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –ø–∏–Ω–≥—É–µ—Ç—Å—è, –Ω–æ –ø–æ—Ä—Ç—ã –∑–∞–∫—Ä—ã—Ç—ã
    print(f"‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ ping")
    resources = get_windows_fallback_resources(ip)
    if resources:
        resources["access_method"] = "Ping"
        resources["server_type"] = get_windows_server_type(ip)
    return resources

def get_windows_server_type(ip):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø Windows —Å–µ—Ä–≤–µ—Ä–∞"""
    for server_type, config in WINDOWS_SERVER_CREDENTIALS.items():
        if ip in config["servers"]:
            return server_type
    return "unknown"

def get_windows_resources_via_systeminfo(session, ip):
    """–ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ systeminfo –∏ PowerShell"""
    try:
        cpu_usage = 0.0
        ram_usage = 0.0
        disk_usage = 0.0
        os_info = "Windows Server"
        total_mem = 0
        available_mem = 0
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
        print("üîç –ü–æ–ª—É—á–∞–µ–º systeminfo...")
        result = session.run_cmd('systeminfo')
        if result.status_code == 0:
            output = result.std_out.decode('utf-8', errors='ignore')
            print(f"‚úÖ Systeminfo –≤—ã–ø–æ–ª–Ω–µ–Ω")
            
            # –ü–∞—Ä—Å–∏–º systeminfo
            for line in output.split('\n'):
                line = line.strip()
                
                if 'OS Name' in line and 'Windows' in line:
                    os_info = line.split(':', 1)[1].strip()
                    print(f"‚úÖ –û–°: {os_info}")
                
                elif 'Total Physical Memory' in line:
                    try:
                        total_mem_str = line.split(':', 1)[1].strip()
                        total_mem = int(''.join(filter(str.isdigit, total_mem_str.split()[0])))
                        print(f"‚úÖ –ü–∞–º—è—Ç—å: {total_mem} MB")
                    except:
                        pass
                
                elif 'Available Physical Memory' in line:
                    try:
                        available_mem_str = line.split(':', 1)[1].strip()
                        available_mem = int(''.join(filter(str.isdigit, available_mem_str.split()[0])))
                    except:
                        pass
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM
            if total_mem > 0 and available_mem > 0:
                ram_usage = round((total_mem - available_mem) * 100.0 / total_mem, 1)
                print(f"‚úÖ RAM: {ram_usage}%")
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CPU
        print("üîç –ü–æ–ª—É—á–∞–µ–º CPU...")
        result = session.run_cmd('powershell -Command "Get-WmiObject Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select-Object Average"')
        if result.status_code == 0:
            output = result.std_out.decode('utf-8', errors='ignore')
            for line in output.split('\n'):
                line = line.strip()
                numbers = re.findall(r'\d+\.?\d*', line)
                if numbers:
                    try:
                        cpu_usage = float(numbers[0])
                        print(f"‚úÖ CPU: {cpu_usage}%")
                        break
                    except:
                        pass
        
        # 3. –ü–æ–ª—É—á–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —É–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        print("üîç –ü–æ–ª—É—á–∞–µ–º Disk...")
        disk_usage = get_windows_disk_usage(session, ip)
        if disk_usage > 0:
            print(f"‚úÖ Disk: {disk_usage}%")
        
        if cpu_usage > 0 or ram_usage > 0 or disk_usage > 0:
            print(f"‚úÖ –ú–µ—Ç—Ä–∏–∫–∏: CPU={cpu_usage}%, RAM={ram_usage}%, Disk={disk_usage}%")
            
            return {
                "cpu": cpu_usage,
                "ram": ram_usage,
                "disk": disk_usage,
                "load_avg": "N/A",
                "uptime": "N/A",
                "os": os_info,
                "timestamp": datetime.now().strftime("%H:%M:%S"),
                "status": "available"
            }
        else:
            print("‚ö†Ô∏è –ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def get_windows_fallback_resources(ip, method="unknown"):
    """Fallback –º–µ—Ç–æ–¥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Ç–æ–¥–µ –¥–æ—Å—Ç—É–ø–∞"""
    print(f"üîÑ Fallback –¥–ª—è {ip} ({method})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ ping
    try:
        ping_result = subprocess.run(['ping', '-c', '1', ip], 
                                   capture_output=True, text=True, timeout=5)
        ttl_info = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        os_guess = "Windows"
        
        if ping_result.returncode == 0 and "ttl=" in ping_result.stdout.lower():
            for line in ping_result.stdout.split('\n'):
                if 'ttl=' in line.lower():
                    try:
                        ttl = int(line.split('ttl=')[1].split()[0])
                        if ttl <= 64:
                            os_guess = "Windows 10/11"
                        elif ttl <= 128:
                            os_guess = "Windows Server"
                        ttl_info = str(ttl)
                    except:
                        pass
        
        return {
            "cpu": 0.0,
            "ram": 0.0,
            "disk": 0.0,
            "load_avg": "N/A",
            "uptime": "N/A",
            "os": os_guess,
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "status": "available",
            "ping": True,
            "ttl": ttl_info,
            "access_method": method,
            "server_type": get_windows_server_type(ip)
        }
    except:
        return {
            "cpu": 0.0,
            "ram": 0.0,
            "disk": 0.0,
            "load_avg": "N/A",
            "uptime": "N/A",
            "os": "Windows",
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "status": "available",
            "ping": False,
            "ttl": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "access_method": method,
            "server_type": get_windows_server_type(ip)
        }

def get_linux_resources_improved(ip, timeout=20):
    """–ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ Linux —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ZFS"""
    print(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Linux —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è {ip}")
    
    if not check_port(ip, 22, 3):
        print(f"‚ùå –ü–æ—Ä—Ç 22 –∑–∞–∫—Ä—ã—Ç –¥–ª—è {ip}")
        return None
    
    resources = {
        "cpu": 0.0,
        "ram": 0.0, 
        "disk": 0.0,
        "load_avg": "N/A",
        "uptime": "N/A",
        "os": "Linux",
        "timestamp": datetime.now().strftime("%H:%M:%S"),
        "access_method": "SSH"
    }
    
    # CPU usage
    success, output, error = run_ssh_command(ip, "cat /proc/stat | head -1", 5)
    if success and output:
        try:
            parts = output.split()
            if len(parts) >= 8:
                user = int(parts[1])
                nice = int(parts[2]) 
                system = int(parts[3])
                idle = int(parts[4])
                iowait = int(parts[5]) if len(parts) > 5 else 0
                
                total = user + nice + system + idle + iowait
                if total > 0:
                    resources["cpu"] = round((user + nice + system) * 100.0 / total, 1)
                    print(f"‚úÖ CPU: {resources['cpu']}%")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CPU: {e}")
    
    # RAM usage - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê
    print("üîç –ü–æ–ª—É—á–∞–µ–º RAM...")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è RAM
    ram_commands = [
        "free -b | head -2",  # –ë–∞–π—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏
        "free -m | head -2",  # –ú–µ–≥–∞–±–∞–π—Ç—ã
        "cat /proc/meminfo",  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
        "free | head -2"      # –ü—Ä–æ—Å—Ç–æ–π free
    ]
    
    for cmd in ram_commands:
        success, output, error = run_ssh_command(ip, cmd, 5)
        if success and output:
            print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ RAM: {cmd}")
            print(f"–í—ã–≤–æ–¥ RAM: {output[:200]}...")
            
            try:
                # –ú–µ—Ç–æ–¥ 1: –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ free -b (–±–∞–π—Ç—ã)
                if "Mem:" in output and "free -b" in cmd:
                    lines = output.split('\n')
                    for line in lines:
                        if line.startswith('Mem:'):
                            parts = line.split()
                            if len(parts) >= 7:
                                total_mem = int(parts[1])  # Total
                                used_mem = int(parts[2])   # Used
                                if total_mem > 0:
                                    ram_usage = round(used_mem * 100.0 / total_mem, 1)
                                    resources["ram"] = ram_usage
                                    print(f"‚úÖ RAM (free -b): {ram_usage}%")
                                    break
                
                # –ú–µ—Ç–æ–¥ 2: –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ free -m (–º–µ–≥–∞–±–∞–π—Ç—ã)
                elif "Mem:" in output and "free -m" in cmd:
                    lines = output.split('\n')
                    for line in lines:
                        if line.startswith('Mem:'):
                            parts = line.split()
                            if len(parts) >= 7:
                                total_mem = int(parts[1]) * 1024 * 1024  # Convert MB to bytes
                                used_mem = int(parts[2]) * 1024 * 1024   # Convert MB to bytes
                                if total_mem > 0:
                                    ram_usage = round(used_mem * 100.0 / total_mem, 1)
                                    resources["ram"] = ram_usage
                                    print(f"‚úÖ RAM (free -m): {ram_usage}%")
                                    break
                
                # –ú–µ—Ç–æ–¥ 3: –ü–∞—Ä—Å–∏–º /proc/meminfo
                elif "MemTotal:" in output and "MemAvailable:" in output:
                    mem_total = 0
                    mem_available = 0
                    
                    for line in output.split('\n'):
                        if line.startswith('MemTotal:'):
                            mem_total = int(line.split()[1]) * 1024  # Convert KB to bytes
                        elif line.startswith('MemAvailable:'):
                            mem_available = int(line.split()[1]) * 1024  # Convert KB to bytes
                    
                    if mem_total > 0 and mem_available > 0:
                        used_mem = mem_total - mem_available
                        ram_usage = round(used_mem * 100.0 / mem_total, 1)
                        resources["ram"] = ram_usage
                        print(f"‚úÖ RAM (meminfo): {ram_usage}%")
                        break
                
                # –ú–µ—Ç–æ–¥ 4: –ü—Ä–æ—Å—Ç–æ–π free
                elif "Mem:" in output:
                    lines = output.split('\n')
                    for line in lines:
                        if line.startswith('Mem:'):
                            parts = line.split()
                            if len(parts) >= 7:
                                total_mem = int(parts[1])
                                used_mem = int(parts[2])
                                if total_mem > 0:
                                    # –ï—Å–ª–∏ —á–∏—Å–ª–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ, —ç—Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–æ –≤ KB
                                    if total_mem < 1000000:  # –ú–µ–Ω—å—à–µ 1GB –≤ KB
                                        total_mem *= 1024  # Convert KB to bytes
                                        used_mem *= 1024   # Convert KB to bytes
                                    
                                    ram_usage = round(used_mem * 100.0 / total_mem, 1)
                                    resources["ram"] = ram_usage
                                    print(f"‚úÖ RAM (simple free): {ram_usage}%")
                                    break
                
                if resources["ram"] > 0:
                    break
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RAM –¥–ª—è –∫–æ–º–∞–Ω–¥—ã {cmd}: {e}")
                continue
    
    # Disk usage - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø ZFS
    print("üîç –ü–æ–ª—É—á–∞–µ–º Disk usage...")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–∞
    is_proxmox = ip.startswith("192.168.30.")  # Proxmox —Å–µ—Ä–≤–µ—Ä—ã
    is_backup = ip in ["192.168.20.30", "192.168.20.32", "192.168.20.59"]  # bup —Å–µ—Ä–≤–µ—Ä—ã
    
    if is_proxmox or is_backup:
        # –î–ª—è Proxmox –∏ –±—ç–∫–∞–ø —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º zpool list
        print(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º ZFS –¥–ª—è {ip}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø—É–ª–∞
        if ip == "192.168.20.32":  # bup —Å–µ—Ä–≤–µ—Ä
            pool_name = "zfs"
        else:  # Proxmox –∏ –¥—Ä—É–≥–∏–µ –±—ç–∫–∞–ø —Å–µ—Ä–≤–µ—Ä—ã
            pool_name = "rpool"
        
        zfs_commands = [
            f"zpool list -H -o name,size,alloc,free {pool_name}",
            f"zpool list -H -o allocated,size {pool_name}",
            "zpool list -H -o name,size,alloc,free",
            "zpool list -H -o allocated,size"
        ]
        
        for zfs_cmd in zfs_commands:
            success, output, error = run_ssh_command(ip, zfs_cmd, 5)
            if success and output:
                print(f"‚úÖ ZFS –∫–æ–º–∞–Ω–¥–∞: {zfs_cmd}")
                print(f"ZFS –≤—ã–≤–æ–¥: {output}")
                
                try:
                    parts = output.strip().split('\t')
                    print(f"ZFS —á–∞—Å—Ç–∏: {parts}")
                    
                    if len(parts) >= 3:
                        # –§–æ—Ä–º–∞—Ç: name size alloc free
                        if len(parts) == 4:
                            size_str = parts[1]
                            alloc_str = parts[2]
                        # –§–æ—Ä–º–∞—Ç: alloc size  
                        elif len(parts) == 2:
                            alloc_str = parts[0]
                            size_str = parts[1]
                        else:
                            continue
                        
                        # –ü–∞—Ä—Å–∏–º —Ä–∞–∑–º–µ—Ä—ã (—É–¥–∞–ª—è–µ–º —Å—É—Ñ—Ñ–∏–∫—Å—ã G, T –∏ —Ç.–¥.)
                        def parse_size(size_str):
                            size_str = size_str.upper().strip()
                            multiplier = 1
                            
                            if size_str.endswith('T'):
                                multiplier = 1024 * 1024 * 1024 * 1024
                                size_str = size_str[:-1]
                            elif size_str.endswith('G'):
                                multiplier = 1024 * 1024 * 1024
                                size_str = size_str[:-1]
                            elif size_str.endswith('M'):
                                multiplier = 1024 * 1024
                                size_str = size_str[:-1]
                            elif size_str.endswith('K'):
                                multiplier = 1024
                                size_str = size_str[:-1]
                            
                            try:
                                return float(size_str) * multiplier
                            except:
                                return 0
                        
                        total_size = parse_size(size_str)
                        used_size = parse_size(alloc_str)
                        
                        if total_size > 0 and used_size > 0:
                            disk_usage = round(used_size * 100.0 / total_size, 1)
                            resources["disk"] = disk_usage
                            print(f"‚úÖ ZFS Disk: {disk_usage}% (Total: {total_size}, Used: {used_size})")
                            break
                            
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ZFS: {e}")
                    continue
    else:
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö Linux —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π df
        success, output, error = run_ssh_command(ip, "df / | tail -1", 5)
        if success and output:
            try:
                parts = output.split()
                if len(parts) >= 5:
                    usage_str = parts[4]
                    if usage_str.endswith('%'):
                        resources["disk"] = float(usage_str[:-1])
                        print(f"‚úÖ Standard Disk: {resources['disk']}%")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Disk: {e}")
    
    # Load average
    success, output, error = run_ssh_command(ip, "cat /proc/loadavg", 5)
    if success and output:
        try:
            parts = output.split()
            if len(parts) >= 3:
                resources["load_avg"] = f"{parts[0]}, {parts[1]}, {parts[2]}"
        except:
            pass
    
    # Uptime
    success, output, error = run_ssh_command(ip, "cat /proc/uptime", 5)
    if success and output:
        try:
            uptime_seconds = float(output.split()[0])
            days = int(uptime_seconds // 86400)
            hours = int((uptime_seconds % 86400) // 3600)
            resources["uptime"] = f"{days}d {hours}h"
        except:
            pass
    
    print(f"‚úÖ –ò—Ç–æ–≥–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è {ip}: CPU={resources['cpu']}%, RAM={resources['ram']}%, Disk={resources['disk']}%")
    return resources

def check_resource_thresholds(ip, resources, server_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤"""
    alerts = []
    if not resources:
        return alerts

    cpu = resources.get("cpu", 0)
    ram = resources.get("ram", 0)
    disk = resources.get("disk", 0)

    if cpu >= RESOURCE_THRESHOLDS["cpu_critical"]:
        alerts.append(f"üö® CPU: {cpu}% (–∫—Ä–∏—Ç–∏—á–Ω–æ)")
    elif cpu >= RESOURCE_THRESHOLDS["cpu_warning"]:
        alerts.append(f"‚ö†Ô∏è CPU: {cpu}% (–≤—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)")

    if ram >= RESOURCE_THRESHOLDS["ram_critical"]:
        alerts.append(f"üö® RAM: {ram}% (–∫—Ä–∏—Ç–∏—á–Ω–æ)")
    elif ram >= RESOURCE_THRESHOLDS["ram_warning"]:
        alerts.append(f"‚ö†Ô∏è RAM: {ram}% (–º–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏)")

    if disk >= RESOURCE_THRESHOLDS["disk_critical"]:
        alerts.append(f"üö® Disk: {disk}% (–∫—Ä–∏—Ç–∏—á–Ω–æ)")
    elif disk >= RESOURCE_THRESHOLDS["disk_warning"]:
        alerts.append(f"‚ö†Ô∏è Disk: {disk}% (–º–∞–ª–æ –º–µ—Å—Ç–∞)")

    return alerts

def format_resource_message_compact(server_name, resources, alerts=None):
    """–ö–æ–º–ø–∞–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    if not resources:
        return f"‚ùå {server_name}"

    status_icon = "üü¢"
    if alerts:
        for alert in alerts:
            if "üö®" in alert:
                status_icon = "üî¥"
                break
            elif "‚ö†Ô∏è" in alert:
                status_icon = "üü°"

    cpu = resources.get("cpu", 0)
    ram = resources.get("ram", 0)
    disk = resources.get("disk", 0)
    access_method = resources.get("access_method", "")
    server_type = resources.get("server_type", "")

    message = f"{status_icon} {server_name}"

    parts = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if cpu > 0:
        parts.append(f"C:{cpu}%")
    if ram > 0:
        parts.append(f"R:{ram}%")
    if disk > 0:
        parts.append(f"D:{disk}%")
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ—Ç—Ä–∏–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å WinRM
    if not parts:
        if access_method == "WinRM":
            parts.append("ü™ü‚úÖ")
        elif "WinRM" in access_method:
            parts.append("ü™ü‚ùå")
        else:
            parts.append("ü™ü")

    if parts:
        message += ": " + " ".join(parts)
        
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø —Å–µ—Ä–≤–µ—Ä–∞ –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω
    if server_type and server_type != "unknown":
        message += f" [{server_type}]"

    return message

def format_resource_message(server_name, resources, alerts=None):
    """–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ —Å–µ—Ä–≤–µ—Ä–∞"""
    if not resources:
        return f"‚ùå {server_name}: –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"

    status_icon = "üü¢"
    if alerts:
        for alert in alerts:
            if "üö®" in alert:
                status_icon = "üî¥"
                break
            elif "‚ö†Ô∏è" in alert:
                status_icon = "üü°"

    message = f"{status_icon} **{server_name}**\n"
    message += f"‚Ä¢ **CPU:** {resources.get('cpu', 0)}%\n"
    message += f"‚Ä¢ **RAM:** {resources.get('ram', 0)}%\n"
    message += f"‚Ä¢ **Disk:** {resources.get('disk', 0)}%\n"
    message += f"‚Ä¢ **Load:** {resources.get('load_avg', 'N/A')}\n"
    message += f"‚Ä¢ **Uptime:** {resources.get('uptime', 'N/A')}\n"
    message += f"‚Ä¢ **OS:** {resources.get('os', 'Unknown')}\n"
    message += f"‚Ä¢ **–¢–∏–ø:** {resources.get('server_type', 'unknown')}\n"
    message += f"‚Ä¢ **–ú–µ—Ç–æ–¥:** {resources.get('access_method', 'unknown')}\n"
    message += f"‚Ä¢ **–í—Ä–µ–º—è:** {resources.get('timestamp', 'N/A')}"

    if alerts:
        message += "\n\n**‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã:**\n" + "\n".join(alerts)

    return message
