"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ç–∫–∞–ø–æ–≤ Proxmox —Å –∫–Ω–æ–ø–∫–∞–º–∏
"""

import sqlite3
import logging
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class BackupMonitorBot:
    def __init__(self):
        from config import BACKUP_DATABASE_CONFIG
        self.db_path = BACKUP_DATABASE_CONFIG['backups_db']

    def get_today_status(self):
        """–°—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        today = datetime.now().strftime('%Y-%m-%d')

        cursor.execute('''
            SELECT
                host_name,
                backup_status,
                COUNT(*) as report_count,
                MAX(received_at) as last_report
            FROM proxmox_backups
            WHERE date(received_at) = ?
            GROUP BY host_name, backup_status
            ORDER BY host_name, last_report DESC
        ''', (today,))

        results = cursor.fetchall()
        conn.close()

        return results

    def get_recent_backups(self, hours=24):
        """–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        since_time = (datetime.now() - timedelta(hours=hours)).strftime('%Y-%m-%d %H:%M:%S')

        cursor.execute('''
            SELECT
                host_name,
                backup_status,
                duration,
                total_size,
                error_message,
                received_at
            FROM proxmox_backups
            WHERE received_at >= ?
            ORDER BY received_at DESC
            LIMIT 15
        ''', (since_time,))

        results = cursor.fetchall()
        conn.close()

        return results

    def get_host_status(self, host_name):
        """–°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT
                backup_status,
                duration,
                total_size,
                error_message,
                received_at
            FROM proxmox_backups
            WHERE host_name = ?
            ORDER BY received_at DESC
            LIMIT 5
        ''', (host_name,))

        results = cursor.fetchall()
        conn.close()

        return results

    def get_failed_backups(self, days=1):
        """–ù–µ—É–¥–∞—á–Ω—ã–µ –±—ç–∫–∞–ø—ã –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        since_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')

        cursor.execute('''
            SELECT
                host_name,
                backup_status,
                error_message,
                received_at
            FROM proxmox_backups
            WHERE backup_status = 'failed'
            AND date(received_at) >= ?
            ORDER BY received_at DESC
        ''', (since_date,))

        results = cursor.fetchall()
        conn.close()

        return results

    def get_all_hosts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT DISTINCT host_name
            FROM proxmox_backups
            ORDER BY host_name
        ''')

        results = [row[0] for row in cursor.fetchall()]
        conn.close()

        return results
    
    def get_database_backups_stats(self, hours=24):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—ç–∫–∞–ø–∞–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        since_time = (datetime.now() - timedelta(hours=hours)).strftime('%Y-%m-%d %H:%M:%S')
        
        cursor.execute('''
            SELECT 
                backup_type,
                database_display_name,
                backup_status,
                COUNT(*) as backup_count,
                MAX(received_at) as last_backup
            FROM database_backups 
            WHERE received_at >= ?
            GROUP BY backup_type, database_display_name, backup_status
            ORDER BY backup_type, database_display_name, last_backup DESC
        ''', (since_time,))
        
        results = cursor.fetchall()
        conn.close()
        
        return results

    def get_database_backups_summary(self, hours=24):
        """–°–≤–æ–¥–∫–∞ –ø–æ –±—ç–∫–∞–ø–∞–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        stats = self.get_database_backups_stats(hours)
        
        if not stats:
            return {}
        
        summary = {}
        for backup_type, db_name, status, count, last_backup in stats:
            if backup_type not in summary:
                summary[backup_type] = {}
            if db_name not in summary[backup_type]:
                summary[backup_type][db_name] = {'success': 0, 'failed': 0, 'last_backup': last_backup}
            
            summary[backup_type][db_name][status] = count
        
        return summary

def format_backup_summary(backup_bot):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –±—ç–∫–∞–ø–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today_status = backup_bot.get_today_status()

    if not today_status:
        return "üìä –ë—ç–∫–∞–ø—ã Proxmox –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—ç–∫–∞–ø–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ö–æ—Å—Ç–∞–º
    hosts = {}
    for host, status, count, last_report in today_status:
        if host not in hosts:
            hosts[host] = []
        hosts[host].append((status, count, last_report))

    message = "üìä –ë—ç–∫–∞–ø—ã Proxmox –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n\n"

    for host in sorted(hosts.keys()):
        host_reports = hosts[host]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞
        has_success = any(status == 'success' for status, count, _ in host_reports)
        has_failed = any(status == 'failed' for status, count, _ in host_reports)

        if has_failed:
            icon = "‚ùå"
        elif has_success:
            icon = "‚úÖ"
        else:
            icon = "‚ö†Ô∏è"

        message += f"{icon} {host}:\n"

        for status, count, last_report in host_reports:
            status_icon = "‚úÖ" if status == 'success' else "‚ùå" if status == 'failed' else "‚ö†Ô∏è"
            time_str = datetime.strptime(last_report, '%Y-%m-%d %H:%M:%S').strftime('%H:%M')
            message += f"   {status_icon} {status}: {count} –æ—Ç—á–µ—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–π: {time_str})\n"

        message += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
    message += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n"
    message += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

    return message

def format_recent_backups(backup_bot, hours=24):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤"""
    recent = backup_bot.get_recent_backups(hours)

    if not recent:
        return f"üìÖ –ë—ç–∫–∞–ø—ã –∑–∞ {hours} —á–∞—Å–æ–≤\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    message = f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã ({hours}—á)\n\n"

    for host, status, duration, size, error, received_at in recent:
        icon = "‚úÖ" if status == 'success' else "‚ùå"
        time_str = datetime.strptime(received_at, '%Y-%m-%d %H:%M:%S').strftime('%m-%d %H:%M')

        message += f"{icon} {time_str} - {host}\n"
        message += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
        if duration:
            message += f"   –í—Ä–µ–º—è: {duration}\n"
        if size:
            message += f"   –†–∞–∑–º–µ—Ä: {size}\n"
        if error:
            message += f"   –û—à–∏–±–∫–∞: {error[:50]}...\n"
        message += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    message += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
    
    return message

def format_failed_backups(backup_bot, days=1):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
    failed = backup_bot.get_failed_backups(days)

    if not failed:
        return f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –±—ç–∫–∞–ø—ã ({days}–¥)\n\n–ù–µ—Ç –æ—à–∏–±–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚úÖ"

    message = f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ –±—ç–∫–∞–ø—ã ({days}–¥)\n\n"

    for host, status, error, received_at in failed:
        time_str = datetime.strptime(received_at, '%Y-%m-%d %H:%M:%S').strftime('%m-%d %H:%M')

        message += f"üïí {time_str} - {host}\n"
        if error:
            message += f"   –û—à–∏–±–∫–∞: {error[:80]}{'...' if len(error) > 80 else ''}\n"
        else:
            message += f"   –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n"
        message += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    message += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
    
    return message

def format_host_status(backup_bot, host_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    host_status = backup_bot.get_host_status(host_name)

    if not host_status:
        return f"üîç –°—Ç–∞—Ç—É—Å {host_name}\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—ç–∫–∞–ø–∞—Ö"

    message = f"üîç –°—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤ {host_name}\n\n"

    for status, duration, size, error, received_at in host_status:
        icon = "‚úÖ" if status == 'success' else "‚ùå"

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ
        try:
            received_dt = datetime.strptime(received_at, '%Y-%m-%d %H:%M:%S')
            time_str = received_dt.strftime('%m-%d %H:%M')  # –ú–µ—Å—è—Ü-–¥–µ–Ω—å –ß–∞—Å:–ú–∏–Ω—É—Ç–∞
        except:
            time_str = received_at[:16]  # Fallback

        message += f"{icon} {time_str} - {status}\n"

        if duration:
            message += f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
        if size:
            message += f"   üíæ –†–∞–∑–º–µ—Ä: {size}\n"
        if error:
            message += f"   ‚ùó –û—à–∏–±–∫–∞: {error[:60]}...\n"
        message += "\n"

    return message

def format_hosts_list(backup_bot):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤"""
    hosts = backup_bot.get_all_hosts()

    if not hosts:
        return "üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö"

    message = "üìã –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"
    message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:\n\n"

    for host in sorted(hosts):
        message += f"‚Ä¢ {host}\n"

    message += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"

    return message

def format_database_backups_report(backup_bot, hours=24):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –±—ç–∫–∞–ø–∞–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ë–ï–ó Markdown"""
    try:
        stats = backup_bot.get_database_backups_stats(hours)
        
        if not stats:
            return f"üìä –ë—ç–∫–∞–ø—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö ({hours}—á)\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—ç–∫–∞–ø–∞—Ö –ë–î –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        summary = {}
        type_names = {
            'company_database': 'üè¢ –û—Å–Ω–æ–≤–Ω—ã–µ –ë–î',
            'barnaul': 'üèîÔ∏è –ë–∞—Ä–Ω–∞—É–ª', 
            'client': 'üë• –ö–ª–∏–µ–Ω—Ç—ã',
            'yandex': '‚òÅÔ∏è Yandex'
        }
        
        for backup_type, db_name, status, count, last_backup in stats:
            if backup_type not in summary:
                summary[backup_type] = {}
            if db_name not in summary[backup_type]:
                summary[backup_type][db_name] = {'success': 0, 'failed': 0, 'last_backup': last_backup}
            summary[backup_type][db_name][status] += count
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ë–ï–ó Markdown —Ä–∞–∑–º–µ—Ç–∫–∏
        message = f"üìä –ë—ç–∫–∞–ø—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö ({hours}—á)\n\n"
        
        for backup_type, databases in summary.items():
            type_display = type_names.get(backup_type, f"üìÅ {backup_type}")
            message += f"{type_display}:\n"
            
            for db_name, stats in databases.items():
                total = stats['success'] + stats['failed']
                if stats['success'] > 0 and stats['failed'] == 0:
                    status_icon = "‚úÖ"
                elif stats['failed'] > 0:
                    status_icon = "‚ùå"
                else:
                    status_icon = "‚ö†Ô∏è"
                    
                message += f"{status_icon} {db_name}: {stats['success']}/{total}\n"
            
            message += "\n"
        
        message += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        
        return message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ format_database_backups_report: {e}")
        import traceback
        logger.error(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}"

def format_detailed_database_backups(backup_bot, hours=24):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –±—ç–∫–∞–ø–∞–º –ë–î —Å –∏—Å—Ç–æ—Ä–∏–µ–π"""
    try:
        stats = backup_bot.get_database_backups_stats(hours)
        
        if not stats:
            return f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ë–î ({hours}—á)\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        message = f"üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –ë–î ({hours}—á)\n\n"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
        db_details = {}
        for backup_type, db_name, status, count, last_backup in stats:
            key = (backup_type, db_name)
            if key not in db_details:
                db_details[key] = []
            db_details[key].append({
                'status': status,
                'count': count,
                'last_backup': last_backup
            })
        
        type_names = {
            'company_database': 'üè¢',
            'barnaul': 'üèîÔ∏è', 
            'client': 'üë•',
            'yandex': '‚òÅÔ∏è'
        }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∏ –∏–º–µ–Ω–∏ –ë–î
        sorted_dbs = sorted(db_details.items(), key=lambda x: (x[0][0], x[0][1]))
        
        for (backup_type, db_name), backups in sorted_dbs:
            type_icon = type_names.get(backup_type, 'üìÅ')
            
            # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            success_count = sum(b['count'] for b in backups if b['status'] == 'success')
            failed_count = sum(b['count'] for b in backups if b['status'] == 'failed')
            total_count = success_count + failed_count
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
            if success_count > 0 and failed_count == 0:
                status_icon = "‚úÖ"
            elif failed_count > 0:
                status_icon = "‚ùå"
            else:
                status_icon = "‚ö†Ô∏è"
            
            message += f"{type_icon} {db_name} {status_icon}\n"
            message += f"   –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: {total_count}\n"
            message += f"   –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}\n"
            message += f"   –û—à–∏–±–æ–∫: {failed_count}\n"
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø
            last_backup_time = max(b['last_backup'] for b in backups)
            if last_backup_time:
                try:
                    last_time = datetime.strptime(last_backup_time, '%Y-%m-%d %H:%M:%S')
                    message += f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π: {last_time.strftime('%d.%m %H:%M')}\n"
                except:
                    message += f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π: {last_backup_time[:16]}\n"
            
            message += "\n"
        
        message += f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        return message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ format_detailed_database_backups: {e}")
        import traceback
        logger.error(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}"

def get_database_list(backup_bot, hours=24):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞"""
    try:
        stats = backup_bot.get_database_backups_stats(hours)
        
        if not stats:
            return "üìã –°–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—ç–∫–∞–ø–∞—Ö –ë–î"
        
        # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        databases = set()
        for backup_type, db_name, status, count, last_backup in stats:
            databases.add((backup_type, db_name))
        
        message = "üìã –í—ã–±–µ—Ä–∏—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞\n\n"
        message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã:\n\n"
        
        type_names = {
            'company_database': 'üè¢',
            'barnaul': 'üèîÔ∏è', 
            'client': 'üë•',
            'yandex': '‚òÅÔ∏è'
        }
        
        for backup_type, db_name in sorted(databases):
            type_icon = type_names.get(backup_type, 'üìÅ')
            message += f"‚Ä¢ {type_icon} {db_name}\n"
        
        message += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π"
        return message
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_database_list: {e}")
        import traceback
        logger.error(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}")
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ë–î: {e}"
    
def format_database_details(backup_bot, backup_type, db_name, hours=24):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    stats = backup_bot.get_database_backups_stats(hours)
    
    if not stats:
        return f"üìã –î–µ—Ç–∞–ª–∏ –ø–æ {db_name}\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ
    db_stats = [s for s in stats if s[0] == backup_type and s[1] == db_name]
    
    if not db_stats:
        return f"üìã –î–µ—Ç–∞–ª–∏ –ø–æ {db_name}\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
    
    type_names = {
        'company_database': 'üè¢ –û—Å–Ω–æ–≤–Ω–∞—è –ë–î',
        'barnaul': 'üèîÔ∏è –ë–∞—Ä–Ω–∞—É–ª', 
        'client': 'üë• –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è',
        'yandex': '‚òÅÔ∏è Yandex'
    }
    
    type_display = type_names.get(backup_type, f"üìÅ {backup_type}")
    
    message = f"üìã –î–µ—Ç–∞–ª–∏ –ø–æ {db_name}\n"
    message += f"–¢–∏–ø: {type_display}\n"
    message += f"–ü–µ—Ä–∏–æ–¥: {hours} —á–∞—Å–æ–≤\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
    success_count = sum(s[3] for s in db_stats if s[2] == 'success')
    failed_count = sum(s[3] for s in db_stats if s[2] == 'failed')
    total_count = success_count + failed_count
    
    message += f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    message += f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: {success_count}\n"
    message += f"‚ùå –û—à–∏–±–æ–∫: {failed_count}\n"
    message += f"üìà –í—Å–µ–≥–æ: {total_count}\n\n"
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã
    message += "‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã:\n"
    recent_backups = sorted(db_stats, key=lambda x: x[4], reverse=True)[:5]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
    
    for backup in recent_backups:
        status_icon = "‚úÖ" if backup[2] == 'success' else "‚ùå"
        try:
            backup_time = datetime.strptime(backup[4], '%Y-%m-%d %H:%M:%S')
            time_str = backup_time.strftime('%d.%m %H:%M')
        except:
            time_str = backup[4][:16]
        
        message += f"{status_icon} {time_str} - {backup[2]}\n"
    
    message += f"\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
    return message

def create_main_backup_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±—ç–∫–∞–ø–æ–≤"""
    from extensions.extension_manager import extension_manager
    
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∞ Proxmox –±—ç–∫–∞–ø–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ)
    if extension_manager.is_extension_enabled('backup_monitor'):
        keyboard.append([InlineKeyboardButton("üñ•Ô∏è –ë—ç–∫–∞–ø—ã Proxmox", callback_data='backup_proxmox')])
    
    # –ö–Ω–æ–ø–∫–∞ –±—ç–∫–∞–ø–æ–≤ –ë–î (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ)
    if extension_manager.is_extension_enabled('database_backup_monitor'):
        keyboard.append([InlineKeyboardButton("üóÉÔ∏è –ë—ç–∫–∞–ø—ã –ë–î", callback_data='backup_databases')])
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    keyboard.extend([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='backup_refresh'),
         InlineKeyboardButton("üìã –ü–æ–º–æ—â—å", callback_data='backup_help')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='monitor_status'),
         InlineKeyboardButton("‚ö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data='close')]
    ])
    
    return InlineKeyboardMarkup(keyboard)

def create_proxmox_backup_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –±—ç–∫–∞–ø–æ–≤ Proxmox"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –°–µ–≥–æ–¥–Ω—è", callback_data='backup_today'),
         InlineKeyboardButton("üìÖ 24 —á–∞—Å–∞", callback_data='backup_24h')],
        [InlineKeyboardButton("‚ùå –û—à–∏–±–∫–∏", callback_data='backup_failed'),
         InlineKeyboardButton("üìã –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã", callback_data='backup_hosts')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='backup_main'),
         InlineKeyboardButton("‚ö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data='close')]
    ])

def create_database_backup_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –º–µ–Ω—é –±—ç–∫–∞–ø–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –û–±—â–∏–π –æ—Ç—á–µ—Ç", callback_data='db_backups_summary'),
         InlineKeyboardButton("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data='db_backups_detailed')],
        [InlineKeyboardButton("üóÉÔ∏è –°–ø–∏—Å–æ–∫ –ë–î", callback_data='db_backups_list'),
         InlineKeyboardButton("üïê –ó–∞ 48—á", callback_data='db_backups_48h')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='backup_main'),
         InlineKeyboardButton("‚ö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data='close')]
    ])

def create_hosts_keyboard(backup_bot):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ö–æ—Å—Ç–æ–≤"""
    hosts = backup_bot.get_all_hosts()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    keyboard = []
    row = []

    for host in sorted(hosts):
        row.append(InlineKeyboardButton(host, callback_data=f'backup_host_{host}'))
        if len(row) == 2:
            keyboard.append(row)
            row = []

    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–ø–æ–ª–Ω—ã–π —Ä—è–¥
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    keyboard.append([
        InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='backup_proxmox'),
        InlineKeyboardButton("‚ö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data='close')
    ])

    return InlineKeyboardMarkup(keyboard)

def create_database_list_keyboard(backup_bot, hours=24):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    stats = backup_bot.get_database_backups_stats(hours)
    
    if not stats:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='backup_databases')]
        ])
    
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    databases = set()
    for backup_type, db_name, status, count, last_backup in stats:
        databases.add((backup_type, db_name))
    
    keyboard = []
    row = []
    
    for backup_type, db_name in sorted(databases):
        # –°–æ–∑–¥–∞–µ–º callback_data –≤ —Ñ–æ—Ä–º–∞—Ç–µ db_detail_type_name
        callback_data = f"db_detail_{backup_type}_{db_name.replace(' ', '_')}"
        row.append(InlineKeyboardButton(db_name, callback_data=callback_data))
        
        if len(row) == 2:  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            keyboard.append(row)
            row = []
    
    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–ø–æ–ª–Ω—ã–π —Ä—è–¥
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='db_backups_list'),
         InlineKeyboardButton("üìä –û–±—â–∏–π –æ—Ç—á–µ—Ç", callback_data='db_backups_summary')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='backup_databases'),
         InlineKeyboardButton("‚ö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data='close')]
    ])
    
    return InlineKeyboardMarkup(keyboard)

def create_database_detail_keyboard(backup_type, db_name):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ë–î"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f'db_detail_{backup_type}_{db_name.replace(" ", "_")}'),
         InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ë–î", callback_data='db_backups_list')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –ë–î", callback_data='backup_databases'),
         InlineKeyboardButton("‚ö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data='close')]
    ])

def create_back_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –æ–±–∑–æ—Ä—É", callback_data='backup_today')]
    ])

def backup_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /backup - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±—ç–∫–∞–ø–æ–≤"""
    message = (
        "üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±—ç–∫–∞–ø–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )

    update.message.reply_text(
        message,
        parse_mode=None,
        reply_markup=create_main_backup_keyboard()
    )

def backup_search_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä—É"""
    if not context.args:
        update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞: /backup_search pve13", parse_mode=None)
        return

    host_name = context.args[0]
    backup_bot = BackupMonitorBot()
    message = format_host_status(backup_bot, host_name)

    update.message.reply_text(
        message,
        parse_mode=None,
        reply_markup=create_back_keyboard()
    )

def backup_help_command(update, context):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±—ç–∫–∞–ø–æ–≤"""
    help_text = """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ç–∫–∞–ø–æ–≤

/backup - –û—Å–Ω–æ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/backup_search [host] - –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
/db_backups [hours] - –ë—ç–∫–∞–ø—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24—á)
/backup_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
üìä –°–µ–≥–æ–¥–Ω—è - –°–≤–æ–¥–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
üìÖ 24 —á–∞—Å–∞ - –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
‚ùå –û—à–∏–±–∫–∏ - –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
üìã –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã - –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
üóÉÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ë—ç–∫–∞–ø—ã –°–£–ë–î –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
üîÑ –û–±–Ω–æ–≤–∏—Ç—å - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

–ü—Ä–∏–º–µ—Ä—ã:
/backup - –æ–±—â–∞—è —Å–≤–æ–¥–∫–∞
/backup_search pve13 - —Å—Ç–∞—Ç—É—Å pve13
/db_backups 48 - –±—ç–∫–∞–ø—ã –ë–î –∑–∞ 48 —á–∞—Å–æ–≤
"""

    update.message.reply_text(
        help_text,
        parse_mode=None,
        reply_markup=create_main_backup_keyboard()
    )

def backup_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–æ–≤"""
    query = update.callback_query
    query.answer()

    try:
        backup_bot = BackupMonitorBot()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞
        if query.data.startswith('backup_host_'):
            host_name = query.data.replace('backup_host_', '')
            message = format_host_status(backup_bot, host_name)
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–µ—Ä–≤–µ—Ä–∞–º", callback_data='backup_hosts'),
                 InlineKeyboardButton("‚ö´ –ó–∞–∫—Ä—ã—Ç—å", callback_data='close')]
            ])

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ç–∫–∞–ø–æ–≤ –ë–î
        elif query.data == 'db_backups_summary':
            from extensions.extension_manager import extension_manager
            if extension_manager.is_extension_enabled('database_backup_monitor'):
                message = format_database_backups_report(backup_bot, 24)
                keyboard = create_database_backup_keyboard()
            else:
                message = "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ç–∫–∞–ø–æ–≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω"
                keyboard = create_main_backup_keyboard()

        elif query.data == 'db_backups_detailed':
            from extensions.extension_manager import extension_manager
            if extension_manager.is_extension_enabled('database_backup_monitor'):
                message = format_detailed_database_backups(backup_bot, 24)
                keyboard = create_database_backup_keyboard()
            else:
                message = "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ç–∫–∞–ø–æ–≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω"
                keyboard = create_main_backup_keyboard()

        elif query.data == 'db_backups_list':
            from extensions.extension_manager import extension_manager
            if extension_manager.is_extension_enabled('database_backup_monitor'):
                message = get_database_list(backup_bot, 24)
                keyboard = create_database_list_keyboard(backup_bot, 24)
            else:
                message = "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ç–∫–∞–ø–æ–≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω"
                keyboard = create_main_backup_keyboard()

        elif query.data == 'db_backups_48h':
            from extensions.extension_manager import extension_manager
            if extension_manager.is_extension_enabled('database_backup_monitor'):
                message = format_database_backups_report(backup_bot, 48)
                keyboard = create_database_backup_keyboard()
            else:
                message = "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ç–∫–∞–ø–æ–≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω"
                keyboard = create_main_backup_keyboard()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ë–î
        elif query.data.startswith('db_detail_'):
            from extensions.extension_manager import extension_manager
            if extension_manager.is_extension_enabled('database_backup_monitor'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø –∏ –∏–º—è –ë–î –∏–∑ callback_data
                parts = query.data.replace('db_detail_', '').split('_', 1)
                if len(parts) == 2:
                    backup_type = parts[0]
                    db_name = parts[1].replace('_', ' ')  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
                    message = format_database_details(backup_bot, backup_type, db_name, 24)
                    keyboard = create_database_detail_keyboard(backup_type, db_name)
                else:
                    message = "‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞"
                    keyboard = create_database_backup_keyboard()
            else:
                message = "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ç–∫–∞–ø–æ–≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω"
                keyboard = create_main_backup_keyboard()

        elif query.data == 'backup_main':
            message = "üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±—ç–∫–∞–ø–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            keyboard = create_main_backup_keyboard()

        elif query.data == 'backup_proxmox':
            message = "üñ•Ô∏è –ë—ç–∫–∞–ø—ã Proxmox\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            keyboard = create_proxmox_backup_keyboard()

        elif query.data == 'backup_databases':
            from extensions.extension_manager import extension_manager
            if extension_manager.is_extension_enabled('database_backup_monitor'):
                message = "üóÉÔ∏è –ë—ç–∫–∞–ø—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:"
                keyboard = create_database_backup_keyboard()
            else:
                message = "‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ç–∫–∞–ø–æ–≤ –ë–î –æ—Ç–∫–ª—é—á–µ–Ω\n\n–í–∫–ª—é—á–∏—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ 'üóÉÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ç–∫–∞–ø–æ–≤ –ë–î' –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏."
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏", callback_data='extensions_menu')],
                    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='backup_main')]
                ])

        elif query.data == 'backup_today':
            message = format_backup_summary(backup_bot)
            keyboard = create_proxmox_backup_keyboard()

        elif query.data == 'backup_24h':
            message = format_recent_backups(backup_bot, 24)
            keyboard = create_proxmox_backup_keyboard()

        elif query.data == 'backup_failed':
            message = format_failed_backups(backup_bot, 1)
            keyboard = create_proxmox_backup_keyboard()

        elif query.data == 'backup_hosts':
            message = format_hosts_list(backup_bot)
            keyboard = create_hosts_keyboard(backup_bot)

        elif query.data == 'backup_help':
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –≤–º–µ—Å—Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞–µ–º –µ–µ
            help_text = """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ç–∫–∞–ø–æ–≤

/backup - –û—Å–Ω–æ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/backup_search [host] - –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
/db_backups [hours] - –ë—ç–∫–∞–ø—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 24—á)
/backup_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
üìä –°–µ–≥–æ–¥–Ω—è - –°–≤–æ–¥–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
üìÖ 24 —á–∞—Å–∞ - –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
‚ùå –û—à–∏–±–∫–∏ - –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
üìã –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã - –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
üóÉÔ∏è –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –ë—ç–∫–∞–ø—ã –°–£–ë–î –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
üîÑ –û–±–Ω–æ–≤–∏—Ç—å - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

–ü—Ä–∏–º–µ—Ä—ã:
/backup - –æ–±—â–∞—è —Å–≤–æ–¥–∫–∞
/backup_search pve13 - —Å—Ç–∞—Ç—É—Å pve13
/db_backups 48 - –±—ç–∫–∞–ø—ã –ë–î –∑–∞ 48 —á–∞—Å–æ–≤
"""
            message = help_text
            keyboard = create_main_backup_keyboard()

        elif query.data == 'backup_refresh':
            message = "üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±—ç–∫–∞–ø–æ–≤\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
            keyboard = create_main_backup_keyboard()

        else:
            message = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
            keyboard = create_main_backup_keyboard()

        # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ë–ï–ó Markdown parse_mode
        query.edit_message_text(
            text=message,
            parse_mode=None,  # –û–¢–ö–õ–Æ–ß–ê–ï–ú Markdown –ø–∞—Ä—Å–∏–Ω–≥
            reply_markup=keyboard
        )

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}"
        logger.error(error_msg)
        import traceback
        logger.error(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏: {traceback.format_exc()}")
        query.edit_message_text(error_msg)

def setup_backup_commands(dispatcher):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ç–∫–∞–ø–æ–≤"""
    from telegram.ext import CommandHandler, CallbackQueryHandler

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher.add_handler(CommandHandler("backup", backup_command))
    dispatcher.add_handler(CommandHandler("backup_search", backup_search_command))
    dispatcher.add_handler(CommandHandler("db_backups", database_backups_command))
    dispatcher.add_handler(CommandHandler("backup_help", backup_help_command))
    dispatcher.add_handler(CallbackQueryHandler(backup_callback, pattern='^backup_'))
    dispatcher.add_handler(CallbackQueryHandler(backup_callback, pattern='^db_backups_'))
    dispatcher.add_handler(CallbackQueryHandler(backup_callback, pattern='^db_detail_'))

    logger.info("–ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ç–∫–∞–ø–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

def database_backups_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—ç–∫–∞–ø–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    backup_bot = BackupMonitorBot()
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ 24 —á–∞—Å–∞
    hours = 24
    if context.args:
        try:
            hours = int(context.args[0])
        except ValueError:
            update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: /db_backups 24", parse_mode=None)
            return
    
    message = format_database_backups_report(backup_bot, hours)
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='db_backups_refresh')],
        [InlineKeyboardButton("üìä Proxmox –±—ç–∫–∞–ø—ã", callback_data='backup_today')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='backup_today')]
    ])
    
    update.message.reply_text(
        message,
        parse_mode=None,
        reply_markup=keyboard
    )
