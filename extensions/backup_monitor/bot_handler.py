"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ç–∫–∞–ø–æ–≤ Proxmox —Å –∫–Ω–æ–ø–∫–∞–º–∏
"""

import sqlite3
import logging
from datetime import datetime, timedelta
from telegram import InlineKeyboardButton, InlineKeyboardMarkup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

class BackupMonitorBot:
    def __init__(self):
        from config import BACKUP_DATABASE_CONFIG
        self.db_path = BACKUP_DATABASE_CONFIG['backups_db']

    def get_today_status(self):
        """–°—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        today = datetime.now().strftime('%Y-%m-%d')

        cursor.execute('''
            SELECT
                host_name,
                backup_status,
                COUNT(*) as report_count,
                MAX(received_at) as last_report
            FROM proxmox_backups
            WHERE date(received_at) = ?
            GROUP BY host_name, backup_status
            ORDER BY host_name, last_report DESC
        ''', (today,))

        results = cursor.fetchall()
        conn.close()

        return results

    def get_recent_backups(self, hours=24):
        """–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        since_time = (datetime.now() - timedelta(hours=hours)).strftime('%Y-%m-%d %H:%M:%S')

        cursor.execute('''
            SELECT
                host_name,
                backup_status,
                duration,
                total_size,
                error_message,
                received_at
            FROM proxmox_backups
            WHERE received_at >= ?
            ORDER BY received_at DESC
            LIMIT 15
        ''', (since_time,))

        results = cursor.fetchall()
        conn.close()

        return results

    def get_host_status(self, host_name):
        """–°—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT
                backup_status,
                duration,
                total_size,
                error_message,
                received_at
            FROM proxmox_backups
            WHERE host_name = ?
            ORDER BY received_at DESC
            LIMIT 5
        ''', (host_name,))

        results = cursor.fetchall()
        conn.close()

        return results

    def get_failed_backups(self, days=1):
        """–ù–µ—É–¥–∞—á–Ω—ã–µ –±—ç–∫–∞–ø—ã –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        since_date = (datetime.now() - timedelta(days=days)).strftime('%Y-%m-%d')

        cursor.execute('''
            SELECT
                host_name,
                backup_status,
                error_message,
                received_at
            FROM proxmox_backups
            WHERE backup_status = 'failed'
            AND date(received_at) >= ?
            ORDER BY received_at DESC
        ''', (since_date,))

        results = cursor.fetchall()
        conn.close()

        return results

    def get_all_hosts(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤ –∏–∑ –±–∞–∑—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            SELECT DISTINCT host_name
            FROM proxmox_backups
            ORDER BY host_name
        ''')

        results = [row[0] for row in cursor.fetchall()]
        conn.close()

        return results
    
    def get_database_backups_stats(self, hours=24):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –±—ç–∫–∞–ø–∞–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        since_time = (datetime.now() - timedelta(hours=hours)).strftime('%Y-%m-%d %H:%M:%S')
        
        cursor.execute('''
            SELECT 
                backup_type,
                database_display_name,
                backup_status,
                COUNT(*) as backup_count,
                MAX(received_at) as last_backup
            FROM database_backups 
            WHERE received_at >= ?
            GROUP BY backup_type, database_display_name, backup_status
            ORDER BY backup_type, database_display_name, last_backup DESC
        ''', (since_time,))
        
        results = cursor.fetchall()
        conn.close()
        
        return results

    def get_database_backups_summary(self, hours=24):
        """–°–≤–æ–¥–∫–∞ –ø–æ –±—ç–∫–∞–ø–∞–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        stats = self.get_database_backups_stats(hours)
        
        if not stats:
            return "üìä *–ë—ç–∫–∞–ø—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—ç–∫–∞–ø–∞—Ö –ë–î –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
        
        summary = {}
        for backup_type, db_name, status, count, last_backup in stats:
            if backup_type not in summary:
                summary[backup_type] = {}
            if db_name not in summary[backup_type]:
                summary[backup_type][db_name] = {'success': 0, 'failed': 0, 'last_backup': last_backup}
            
            summary[backup_type][db_name][status] = count
        
        return summary

def format_backup_summary(backup_bot):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –±—ç–∫–∞–ø–∞–º –∑–∞ —Å–µ–≥–æ–¥–Ω—è"""
    today_status = backup_bot.get_today_status()

    if not today_status:
        return "üìä *–ë—ç–∫–∞–ø—ã Proxmox –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—ç–∫–∞–ø–∞—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è"

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ö–æ—Å—Ç–∞–º
    hosts = {}
    for host, status, count, last_report in today_status:
        if host not in hosts:
            hosts[host] = []
        hosts[host].append((status, count, last_report))

    message = "üìä *–ë—ç–∫–∞–ø—ã Proxmox –∑–∞ —Å–µ–≥–æ–¥–Ω—è*\n\n"

    for host in sorted(hosts.keys()):
        host_reports = hosts[host]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å —Ö–æ—Å—Ç–∞
        has_success = any(status == 'success' for status, count, _ in host_reports)
        has_failed = any(status == 'failed' for status, count, _ in host_reports)

        if has_failed:
            icon = "‚ùå"
        elif has_success:
            icon = "‚úÖ"
        else:
            icon = "‚ö†Ô∏è"

        message += f"{icon} *{host}*:\n"

        for status, count, last_report in host_reports:
            status_icon = "‚úÖ" if status == 'success' else "‚ùå" if status == 'failed' else "‚ö†Ô∏è"
            time_str = datetime.strptime(last_report, '%Y-%m-%d %H:%M:%S').strftime('%H:%M')
            message += f"   {status_icon} {status}: {count} –æ—Ç—á–µ—Ç–æ–≤ (–ø–æ—Å–ª–µ–¥–Ω–∏–π: {time_str})\n"

        message += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –±—ã–ª–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
    message += f"üïí *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%H:%M:%S')}\n"
    message += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"

    return message

def format_recent_backups(backup_bot, hours=24):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—ç–∫–∞–ø–æ–≤"""
    recent = backup_bot.get_recent_backups(hours)

    if not recent:
        return f"üìÖ *–ë—ç–∫–∞–ø—ã –∑–∞ {hours} —á–∞—Å–æ–≤*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"

    message = f"üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã ({hours}—á)*\n\n"

    for host, status, duration, size, error, received_at in recent:
        icon = "‚úÖ" if status == 'success' else "‚ùå"
        time_str = datetime.strptime(received_at, '%Y-%m-%d %H:%M:%S').strftime('%m-%d %H:%M')

        message += f"{icon} *{time_str}* - {host}\n"
        message += f"   –°—Ç–∞—Ç—É—Å: {status}\n"
        if duration:
            message += f"   –í—Ä–µ–º—è: {duration}\n"
        if size:
            message += f"   –†–∞–∑–º–µ—Ä: {size}\n"
        if error:
            message += f"   –û—à–∏–±–∫–∞: {error[:50]}...\n"
        message += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    message += f"üïí *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%H:%M:%S')}"
    
    return message

def format_failed_backups(backup_bot, days=1):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
    failed = backup_bot.get_failed_backups(days)

    if not failed:
        return f"‚ùå *–ù–µ—É–¥–∞—á–Ω—ã–µ –±—ç–∫–∞–ø—ã ({days}–¥)*\n\n–ù–µ—Ç –æ—à–∏–±–æ–∫ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ ‚úÖ"

    message = f"‚ùå *–ù–µ—É–¥–∞—á–Ω—ã–µ –±—ç–∫–∞–ø—ã ({days}–¥)*\n\n"

    for host, status, error, received_at in failed:
        time_str = datetime.strptime(received_at, '%Y-%m-%d %H:%M:%S').strftime('%m-%d %H:%M')

        message += f"üïí *{time_str}* - {host}\n"
        if error:
            message += f"   –û—à–∏–±–∫–∞: {error[:80]}{'...' if len(error) > 80 else ''}\n"
        else:
            message += f"   –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n"
        message += "\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    message += f"üïí *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%H:%M:%S')}"
    
    return message

def format_host_status(backup_bot, host_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ö–æ—Å—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º"""
    host_status = backup_bot.get_host_status(host_name)

    if not host_status:
        return f"üîç *–°—Ç–∞—Ç—É—Å {host_name}*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—ç–∫–∞–ø–∞—Ö"

    message = f"üîç *–°—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤ {host_name}*\n\n"

    for status, duration, size, error, received_at in host_status:
        icon = "‚úÖ" if status == 'success' else "‚ùå"

        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ
        try:
            received_dt = datetime.strptime(received_at, '%Y-%m-%d %H:%M:%S')
            time_str = received_dt.strftime('%m-%d %H:%M')  # –ú–µ—Å—è—Ü-–¥–µ–Ω—å –ß–∞—Å:–ú–∏–Ω—É—Ç–∞
        except:
            time_str = received_at[:16]  # Fallback

        message += f"{icon} *{time_str}* - {status}\n"

        if duration:
            message += f"   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}\n"
        if size:
            message += f"   üíæ –†–∞–∑–º–µ—Ä: {size}\n"
        if error:
            message += f"   ‚ùó –û—à–∏–±–∫–∞: {error[:60]}...\n"
        message += "\n"

    return message

def format_hosts_list(backup_bot):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤"""
    hosts = backup_bot.get_all_hosts()

    if not hosts:
        return "üìã *–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö"

    message = "üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞*\n\n"
    message += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:\n\n"

    for host in sorted(hosts):
        message += f"‚Ä¢ {host}\n"

    message += "\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –∏–º–µ–Ω–µ–º —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞"

    return message

def format_database_backups_report(backup_bot, hours=24):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –±—ç–∫–∞–ø–∞–º –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    summary = backup_bot.get_database_backups_summary(hours)
    
    if not summary:
        return f"üìä *–ë—ç–∫–∞–ø—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö ({hours}—á)*\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –±—ç–∫–∞–ø–∞—Ö –ë–î"
    
    message = f"üìä *–ë—ç–∫–∞–ø—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö ({hours}—á)*\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏
    if 'company_database' in summary:
        message += "üè¢ *–û—Å–Ω–æ–≤–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:*\n"
        for db_name, stats in summary['company_database'].items():
            status_icon = "‚úÖ" if stats['success'] > 0 else "‚ùå"
            message += f"{status_icon} {db_name}: {stats['success']} —É—Å–ø–µ—à–Ω—ã—Ö\n"
        message += "\n"
    
    # –ë—ç–∫–∞–ø—ã –ë–∞—Ä–Ω–∞—É–ª
    if 'barnaul' in summary:
        message += "üèîÔ∏è *–ë—ç–∫–∞–ø—ã –ë–∞—Ä–Ω–∞—É–ª:*\n"
        for db_name, stats in summary['barnaul'].items():
            if stats['success'] > 0:
                status_icon = "‚úÖ"
            elif stats['failed'] > 0:
                status_icon = "‚ùå"
            else:
                status_icon = "‚ö†Ô∏è"
            message += f"{status_icon} {db_name}: —É—Å–ø–µ—à–Ω—ã—Ö {stats['success']}, –æ—à–∏–±–æ–∫ {stats['failed']}\n"
        message += "\n"
    
    # –ë—ç–∫–∞–ø—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
    if 'client' in summary:
        message += "üë• *–ë–∞–∑—ã –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n"
        for db_name, stats in summary['client'].items():
            status_icon = "‚úÖ" if stats['success'] > 0 else "‚ùå"
            message += f"{status_icon} {db_name}: {stats['success']} —É—Å–ø–µ—à–Ω—ã—Ö\n"
        message += "\n"
    
    # –ë—ç–∫–∞–ø—ã Yandex
    if 'yandex' in summary:
        message += "‚òÅÔ∏è *–ë—ç–∫–∞–ø—ã Yandex:*\n"
        for db_name, stats in summary['yandex'].items():
            status_icon = "‚úÖ" if stats['success'] > 0 else "‚ùå"
            message += f"{status_icon} {db_name}: {stats['success']} —É—Å–ø–µ—à–Ω—ã—Ö\n"
    
    message += f"\nüïí *–û–±–Ω–æ–≤–ª–µ–Ω–æ:* {datetime.now().strftime('%H:%M:%S')}"
    
    return message

def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üìä –°–µ–≥–æ–¥–Ω—è", callback_data='backup_today'),
         InlineKeyboardButton("üìÖ 24 —á–∞—Å–∞", callback_data='backup_24h')],
        [InlineKeyboardButton("‚ùå –û—à–∏–±–∫–∏", callback_data='backup_failed'),
         InlineKeyboardButton("üìã –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã", callback_data='backup_hosts')],
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='backup_refresh')]
    ])

def create_hosts_keyboard(backup_bot):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Ö–æ—Å—Ç–æ–≤"""
    hosts = backup_bot.get_all_hosts()

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    keyboard = []
    row = []

    for host in sorted(hosts):
        row.append(InlineKeyboardButton(host, callback_data=f'backup_host_{host}'))
        if len(row) == 2:
            keyboard.append(row)
            row = []

    if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–µ–ø–æ–ª–Ω—ã–π —Ä—è–¥
        keyboard.append(row)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='backup_today')])

    return InlineKeyboardMarkup(keyboard)

def create_back_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –æ–±–∑–æ—Ä—É", callback_data='backup_today')]
    ])

def backup_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /backup"""
    backup_bot = BackupMonitorBot()
    message = format_backup_summary(backup_bot)

    update.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=create_main_keyboard()
    )

def backup_search_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞ –ø–æ —Å–µ—Ä–≤–µ—Ä—É"""
    if not context.args:
        update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞: `/backup_search pve13`", parse_mode='Markdown')
        return

    host_name = context.args[0]
    backup_bot = BackupMonitorBot()
    message = format_host_status(backup_bot, host_name)

    update.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=create_back_keyboard()
    )

def backup_help_command(update, context):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±—ç–∫–∞–ø–æ–≤"""
    help_text = """
ü§ñ *–ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ç–∫–∞–ø–æ–≤*

*/backup* - –û—Å–Ω–æ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
*/backup_search [host]* - –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
*/backup_help* - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*
üìä *–°–µ–≥–æ–¥–Ω—è* - –°–≤–æ–¥–∫–∞ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
üìÖ *24 —á–∞—Å–∞* - –ò—Å—Ç–æ—Ä–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—É—Ç–∫–∏
‚ùå *–û—à–∏–±–∫–∏* - –°–ø–∏—Å–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
üìã *–í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã* - –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
üîÑ *–û–±–Ω–æ–≤–∏—Ç—å* - –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ

*–ü—Ä–∏–º–µ—Ä—ã:*
`/backup` - –æ–±—â–∞—è —Å–≤–æ–¥–∫–∞
`/backup_search pve13` - —Å—Ç–∞—Ç—É—Å pve13
"""

    update.message.reply_text(
        help_text,
        parse_mode='Markdown',
        reply_markup=create_main_keyboard()
    )

def backup_callback(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è –±—ç–∫–∞–ø–æ–≤"""
    query = update.callback_query
    query.answer()

    try:
        backup_bot = BackupMonitorBot()
        current_message = query.message.text
        current_keyboard = query.message.reply_markup

        if query.data == 'backup_today':
            message = format_backup_summary(backup_bot)
            keyboard = create_main_keyboard()

        elif query.data == 'backup_24h':
            message = format_recent_backups(backup_bot, 24)
            keyboard = create_back_keyboard()

        elif query.data == 'backup_failed':
            message = format_failed_backups(backup_bot, 1)
            keyboard = create_back_keyboard()

        elif query.data == 'backup_hosts':
            message = format_hosts_list(backup_bot)
            keyboard = create_hosts_keyboard(backup_bot)

        elif query.data == 'backup_refresh':
            message = format_backup_summary(backup_bot)
            keyboard = create_main_keyboard()

        elif query.data.startswith('backup_host_'):
            host_name = query.data.replace('backup_host_', '')
            message = format_host_status(backup_bot, host_name)
            keyboard = create_back_keyboard()

        else:
            message = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
            keyboard = create_main_keyboard()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        message_changed = (message != current_message)
        keyboard_changed = (keyboard.to_json() != current_keyboard.to_json() if current_keyboard else True)

        if message_changed or keyboard_changed:
            query.edit_message_text(
                text=message,
                parse_mode='Markdown',
                reply_markup=keyboard
            )
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            query.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ "message not modified"
        if "Message is not modified" in str(e):
            query.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
        else:
            error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            try:
                query.edit_message_text(
                    error_message,
                    reply_markup=create_main_keyboard()
                )
            except Exception as edit_error:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
                query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")


def setup_backup_commands(dispatcher):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ç–∫–∞–ø–æ–≤"""
    from telegram.ext import CommandHandler, CallbackQueryHandler

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dispatcher.add_handler(CommandHandler("backup", backup_command))
    dispatcher.add_handler(CommandHandler("backup_search", backup_search_command))
    dispatcher.add_handler(CommandHandler("backup_help", backup_help_command))
    dispatcher.add_handler(CallbackQueryHandler(backup_callback, pattern='^backup_'))
    dispatcher.add_handler(CommandHandler("db_backups", database_backups_command))

    logger.info("–ö–æ–º–∞–Ω–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ç–∫–∞–ø–æ–≤ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

def get_backup_history(self, days=30, host_name=None):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –±—ç–∫–∞–ø–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    conn = sqlite3.connect(self.db_path)
    cursor = conn.cursor()

    query = '''
        SELECT
            host_name,
            backup_status,
            duration,
            total_size,
            error_message,
            received_at
        FROM proxmox_backups
        WHERE received_at >= datetime('now', ?)
    '''
    params = [f'-{days} days']

    if host_name:
        query += ' AND host_name = ?'
        params.append(host_name)

    query += ' ORDER BY received_at DESC'

    cursor.execute(query, params)
    results = cursor.fetchall()
    conn.close()

    return results

def get_backup_statistics(self, days=30):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—ç–∫–∞–ø–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    conn = sqlite3.connect(self.db_path)
    cursor = conn.cursor()

    cursor.execute('''
        SELECT
            host_name,
            backup_status,
            COUNT(*) as count,
            MAX(received_at) as last_backup
        FROM proxmox_backups
        WHERE received_at >= datetime('now', ?)
        GROUP BY host_name, backup_status
        ORDER BY host_name, last_backup DESC
    ''', (f'-{days} days',))

    results = cursor.fetchall()
    conn.close()

    return results

def database_backups_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±—ç–∫–∞–ø–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    backup_bot = BackupMonitorBot()
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞ 24 —á–∞—Å–∞
    hours = 24
    if context.args:
        try:
            hours = int(context.args[0])
        except ValueError:
            update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: `/db_backups 24`", parse_mode='Markdown')
            return
    
    message = format_database_backups_report(backup_bot, hours)
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data='db_backups_refresh')],
        [InlineKeyboardButton("üìä Proxmox –±—ç–∫–∞–ø—ã", callback_data='backup_today')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data='backup_today')]
    ])
    
    update.message.reply_text(
        message,
        parse_mode='Markdown',
        reply_markup=keyboard
    )
