"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import json
import os
from datetime import datetime

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
EXTENSIONS_CONFIG_FILE = '/opt/monitoring/data/extensions_config.json'

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
AVAILABLE_EXTENSIONS = {
    'backup_monitor': {
        'name': 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ç–∫–∞–ø–æ–≤ Proxmox',
        'description': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–∞–ø–æ–≤ Proxmox –∏–∑ –ø–æ—á—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
        'commands': ['/backup', '/backup_search', '/backup_help'],
        'handlers': ['backup_'],
        'enabled_by_default': True
    },
    'database_backup_monitor': {
        'name': 'üóÉÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ç–∫–∞–ø–æ–≤ –ë–î',
        'description': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–∞–ø–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö',
        'commands': ['/db_backups'],
        'handlers': ['db_backups_'],
        'enabled_by_default': True
    },
    'resource_monitor': {
        'name': 'üíª –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å–æ–≤',
        'description': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CPU, RAM –∏ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞',
        'commands': ['check_resources', 'check_cpu', 'check_ram', 'check_disk'],
        'handlers': ['check_'],
        'enabled_by_default': True
    },
    'web_interface': {
        'name': 'üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å',
        'description': '–í–µ–±-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –∞–¥—Ä–µ—Å—É http://192.168.20.2:5000',
        'commands': [],
        'handlers': [],
        'enabled_by_default': True
    },
    'email_processor': {
        'name': 'üìß –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—á—Ç—ã',
        'description': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º —Å –æ—Ç—á–µ—Ç–∞–º–∏ –æ –±—ç–∫–∞–ø–∞—Ö',
        'commands': [],
        'handlers': [],
        'enabled_by_default': True
    },
    'inventory_monitor': {
        'name': 'üì¶ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è',
        'description': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–ø–ø–∞—Ä–∞—Ç–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤',
        'commands': [],
        'handlers': [],
        'enabled_by_default': False
    },
    'zfs_monitor': {
        'name': 'üíæ ZFS –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
        'description': '–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ZFS —Ñ–∞–π–ª–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º –∏ –ø—É–ª–æ–≤',
        'commands': [],
        'handlers': [],
        'enabled_by_default': False
    }
}

class ExtensionManager:
    def __init__(self):
        self.config_file = EXTENSIONS_CONFIG_FILE
        self.extensions_config = self.load_config()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                default_config = {}
                for ext_id, ext_info in AVAILABLE_EXTENSIONS.items():
                    default_config[ext_id] = {
                        'enabled': ext_info['enabled_by_default'],
                        'last_modified': datetime.now().isoformat()
                    }
                self.save_config(default_config)
                return default_config
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {e}")
            return {}
    
    def save_config(self, config=None):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π –≤ —Ñ–∞–π–ª"""
        try:
            if config is None:
                config = self.extensions_config
            
            os.makedirs(os.path.dirname(self.config_file), exist_ok=True)
            with open(self.config_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, ensure_ascii=False, indent=2)
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π: {e}")
            return False
    
    def is_extension_enabled(self, extension_id):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–æ –ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"""
        if extension_id not in self.extensions_config:
            # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            return AVAILABLE_EXTENSIONS.get(extension_id, {}).get('enabled_by_default', False)
        
        return self.extensions_config[extension_id].get('enabled', False)
    
    def enable_extension(self, extension_id):
        """–í–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"""
        if extension_id not in AVAILABLE_EXTENSIONS:
            return False, f"‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ '{extension_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        if extension_id not in self.extensions_config:
            self.extensions_config[extension_id] = {}
        
        self.extensions_config[extension_id]['enabled'] = True
        self.extensions_config[extension_id]['last_modified'] = datetime.now().isoformat()
        
        if self.save_config():
            return True, f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ '{AVAILABLE_EXTENSIONS[extension_id]['name']}' –≤–∫–ª—é—á–µ–Ω–æ"
        else:
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    
    def disable_extension(self, extension_id):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"""
        if extension_id not in AVAILABLE_EXTENSIONS:
            return False, f"‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ '{extension_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        if extension_id not in self.extensions_config:
            self.extensions_config[extension_id] = {}
        
        self.extensions_config[extension_id]['enabled'] = False
        self.extensions_config[extension_id]['last_modified'] = datetime.now().isoformat()
        
        if self.save_config():
            return True, f"‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ '{AVAILABLE_EXTENSIONS[extension_id]['name']}' –æ—Ç–∫–ª—é—á–µ–Ω–æ"
        else:
            return False, f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    
    def toggle_extension(self, extension_id):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
        if self.is_extension_enabled(extension_id):
            return self.disable_extension(extension_id)
        else:
            return self.enable_extension(extension_id)
    
    def get_extensions_status(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        status = {}
        for ext_id in AVAILABLE_EXTENSIONS:
            status[ext_id] = {
                'enabled': self.is_extension_enabled(ext_id),
                'info': AVAILABLE_EXTENSIONS[ext_id]
            }
        return status
    
    def get_enabled_extensions(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        return [ext_id for ext_id in AVAILABLE_EXTENSIONS if self.is_extension_enabled(ext_id)]
    
    def get_disabled_extensions(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        return [ext_id for ext_id in AVAILABLE_EXTENSIONS if not self.is_extension_enabled(ext_id)]

    def is_command_available(self, command):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Å —É—á–µ—Ç–æ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        for ext_id, ext_info in AVAILABLE_EXTENSIONS.items():
            if command in ext_info.get('commands', []) and not self.is_extension_enabled(ext_id):
                return False
        return True

    def is_handler_available(self, handler_pattern):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —É—á–µ—Ç–æ–º –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π"""
        for ext_id, ext_info in AVAILABLE_EXTENSIONS.items():
            for pattern in ext_info.get('handlers', []):
                if handler_pattern.startswith(pattern) and not self.is_extension_enabled(ext_id):
                    return False
        return True

    def filter_available_commands(self, commands_list):
        """–§–∏–ª—å—Ç—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ"""
        return [cmd for cmd in commands_list if self.is_command_available(cmd)]

    def should_include_backup_data(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤–∫–ª—é—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –±—ç–∫–∞–ø–∞—Ö –≤ –æ—Ç—á–µ—Ç—ã"""
        return self.is_extension_enabled('backup_monitor')

    def is_web_interface_enabled(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        return self.is_extension_enabled('web_interface')
    def restart_required(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        return True

    def get_restart_message(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏"""
        return (
            "üîÑ *–î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞*\n\n"
            "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä—É—á–Ω—É—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:\n"
            "```bash\n"
            "cd /opt/monitoring\n"
            "pkill -f main.py\n"
            "python main.py\n"
            "```\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞)."
        )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
extension_manager = ExtensionManager()
