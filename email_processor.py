#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è root
"""

import sys
import os
import logging
import tempfile
import re
from email import message_from_string
from email.policy import default

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.insert(0, '/opt/monitoring')

def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs('/opt/monitoring/logs', exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('/opt/monitoring/logs/email_processor.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        return logging.getLogger(__name__)
    except Exception as e:
        # –§–æ–ª–±—ç–∫ –Ω–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return logger

logger = setup_logging()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º"""
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∏–∑ STDIN
        raw_email = sys.stdin.read()
        
        if not raw_email or len(raw_email.strip()) < 10:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–∏—Å—å–º–æ")
            return 0
            
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –ø–∏—Å—å–º–æ —Ä–∞–∑–º–µ—Ä–æ–º {len(raw_email)} –±–∞–π—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        with open('/tmp/last_email_debug.txt', 'w') as f:
            f.write(raw_email)
        
        # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        try:
            msg = message_from_string(raw_email, policy=default)
            subject = msg.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
            from_email = msg.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
            to_email = msg.get('to', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—É—á–∞—Ç–µ–ª—å')
            
            logger.info(f"üìß –ü–∏—Å—å–º–æ –æ—Ç: {from_email}")
            logger.info(f"üì® –ü–∏—Å—å–º–æ –∫: {to_email}") 
            logger.info(f"üìù –¢–µ–º–∞: {subject}")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ - –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            logger.info("üîç –í—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–∏—Å—å–º–∞:")
            for key, value in msg.items():
                logger.info(f"   {key}: {value}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞: {e}")
            subject = "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"
            from_email = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            to_email = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Å—å–º–æ –æ—Ç Proxmox
        is_proxmox = is_proxmox_email(subject, from_email, raw_email)
        
        if is_proxmox:
            logger.info("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∏—Å—å–º–æ –æ—Ç Proxmox, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
            process_proxmox_backup_email(raw_email, subject, from_email)
        else:
            logger.info("‚è≠Ô∏è –ü–∏—Å—å–º–æ –Ω–µ –æ—Ç Proxmox, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            log_unknown_email(subject, from_email, raw_email)
        
        return 0  # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return 1  # –û—à–∏–±–∫–∞

def is_proxmox_email(subject, from_email, raw_email):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Å—å–º–æ –æ—Ç Proxmox"""
    subject_lower = str(subject).lower()
    from_lower = str(from_email).lower()
    raw_lower = raw_email.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ Proxmox –ø–∏—Å–µ–º –≤ —Ç–µ–º–µ
    subject_indicators = [
        'vzdump backup status' in subject_lower,
        'proxmox' in subject_lower,
        'vzdump' in subject_lower,
        'backup' in subject_lower and 'status' in subject_lower,
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
    from_indicators = [
        'pve' in from_lower,
        'bup' in from_lower,
        'root@pve' in from_lower,
        'root@bup' in from_lower,
        'sr-pve' in from_lower,
        'sr-bup' in from_lower,
        'localdomain' in from_lower,
    ]
    
    # –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ —Ç–µ–ª–µ –ø–∏—Å—å–º–∞
    body_indicators = [
        'vzdump' in raw_lower,
        'proxmox' in raw_lower,
        'backup' in raw_lower,
        'vm' in raw_lower and 'successful' in raw_lower,
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    result = (any(subject_indicators) or 
              any(from_indicators) or 
              any(body_indicators))
    
    # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Proxmox –ø–∏—Å—å–º–∞:")
    logger.info(f"   –¢–µ–º–∞: {subject_lower}")
    logger.info(f"   –û—Ç: {from_lower}")
    logger.info(f"   –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ç–µ–º—ã: {[i for i in subject_indicators if i]}")
    logger.info(f"   –ü—Ä–∏–∑–Ω–∞–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {[i for i in from_indicators if i]}")
    logger.info(f"   –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ç–µ–ª–∞: {[i for i in body_indicators if i]}")
    logger.info(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    
    return result

def log_unknown_email(subject, from_email, raw_email):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    try:
        log_file = '/opt/monitoring/logs/unknown_emails.log'
        with open(log_file, 'a', encoding='utf-8') as f:
            timestamp = __import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            f.write(f"\n{'='*50}\n")
            f.write(f"–í—Ä–µ–º—è: {timestamp}\n")
            f.write(f"–¢–µ–º–∞: {subject}\n")
            f.write(f"–û—Ç: {from_email}\n")
            f.write(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):\n{raw_email[:500]}\n")
            f.write(f"{'='*50}\n")
        logger.info(f"üìù –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–∏—Å—å–º–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ –ª–æ–≥: {log_file}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–∏—Å—å–º–æ –≤ –ª–æ–≥: {e}")

def process_proxmox_backup_email(raw_email, subject, from_email):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∏—Å—å–º–æ —Å –±—ç–∫–∞–ø–æ–º –æ—Ç Proxmox"""
    try:
        from extensions.email_processor.core import EmailProcessorCore
        
        processor = EmailProcessorCore()
        result = processor.process_email(raw_email)
        
        if result:
            logger.info("‚úÖ –ü–∏—Å—å–º–æ —Å –±—ç–∫–∞–ø–æ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            log_successful_processing(subject, from_email)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
            check_database_after_processing()
        else:
            logger.warning("‚ö†Ô∏è –ü–∏—Å—å–º–æ —Å –±—ç–∫–∞–ø–æ–º –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
            
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ —Å –±—ç–∫–∞–ø–æ–º: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def log_successful_processing(subject, from_email):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∏—Å—å–º–∞"""
    try:
        log_file = '/opt/monitoring/logs/processed_emails.log'
        with open(log_file, 'a', encoding='utf-8') as f:
            timestamp = __import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            f.write(f"{timestamp} - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {subject} (–æ—Ç: {from_email})\n")
        logger.info(f"üìù –ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª–æ–≥: {log_file}")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤ –ª–æ–≥ processed_emails: {e}")

def check_database_after_processing():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    try:
        from extensions.backup_monitor.bot_handler import BackupMonitorBot
        
        bot = BackupMonitorBot()
        today_status = bot.get_today_status()
        
        logger.info(f"üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {len(today_status)} –∑–∞–ø–∏—Å–µ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è")
        
        for host, status, count, last_report in today_status:
            logger.info(f"   üè† {host}: {status} (–æ—Ç—á–µ—Ç–æ–≤: {count})")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

if __name__ == "__main__":
    sys.exit(main())
