#!/usr/bin/env python3
"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è root
"""

import sys
import os
import logging
import tempfile
from email import message_from_string
from email.policy import default

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.insert(0, '/opt/monitoring')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('/opt/monitoring/logs/email_processor.log'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º"""
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∏–∑ STDIN
        raw_email = sys.stdin.read()
        
        if not raw_email or len(raw_email.strip()) < 10:
            logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –ø–∏—Å—å–º–æ")
            return 0
            
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –ø–∏—Å—å–º–æ —Ä–∞–∑–º–µ—Ä–æ–º {len(raw_email)} –±–∞–π—Ç")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∏—Å—å–º–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        with tempfile.NamedTemporaryFile(mode='w', delete=False, suffix='.eml') as f:
            f.write(raw_email)
            temp_filename = f.name
            logger.info(f"üíæ –ü–∏—Å—å–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {temp_filename}")
        
        # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        try:
            msg = message_from_string(raw_email, policy=default)
            subject = msg.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
            from_email = msg.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
            
            logger.info(f"üìß –ü–∏—Å—å–º–æ –æ—Ç: {from_email}")
            logger.info(f"üìù –¢–µ–º–∞: {subject}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–∏—Å—å–º–∞: {e}")
            subject = "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞"
            from_email = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Å—å–º–æ –æ—Ç Proxmox
        if is_proxmox_email(subject, from_email, raw_email):
            logger.info("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–∏—Å—å–º–æ –æ—Ç Proxmox, –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
            process_proxmox_backup_email(raw_email, subject)
        else:
            logger.info("‚è≠Ô∏è –ü–∏—Å—å–º–æ –Ω–µ –æ—Ç Proxmox, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_filename)
        
        return 0  # –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return 1  # –û—à–∏–±–∫–∞

def is_proxmox_email(subject, from_email, raw_email):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Å—å–º–æ –æ—Ç Proxmox"""
    subject_lower = subject.lower()
    from_lower = from_email.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ Proxmox –ø–∏—Å–µ–º
    proxmox_indicators = [
        'vzdump backup status' in subject_lower,
        'proxmox' in subject_lower,
        'pve' in from_lower,
        'bup' in from_lower,
        'root@pve' in from_lower,
        'root@bup' in from_lower,
        'sr-pve' in from_lower,
        'sr-bup' in from_lower,
        'vzdump' in subject_lower,
        'backup' in subject_lower and 'status' in subject_lower
    ]
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –¥–æ–º–µ–Ω—É
    domain_indicators = [
        'localdomain' in from_lower,
        'geltd.local' in from_lower,
        'pve' in from_lower,
        'bup' in from_lower
    ]
    
    result = any(proxmox_indicators) or any(domain_indicators)
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Proxmox –ø–∏—Å—å–º–∞: {result} (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: {proxmox_indicators})")
    
    return result

def process_proxmox_backup_email(raw_email, subject):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∏—Å—å–º–æ —Å –±—ç–∫–∞–ø–æ–º –æ—Ç Proxmox"""
    try:
        from extensions.email_processor.core import EmailProcessorCore
        
        processor = EmailProcessorCore()
        result = processor.process_email(raw_email)
        
        if result:
            logger.info("‚úÖ –ü–∏—Å—å–º–æ —Å –±—ç–∫–∞–ø–æ–º —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É")
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            log_successful_processing(subject)
        else:
            logger.warning("‚ö†Ô∏è –ü–∏—Å—å–º–æ —Å –±—ç–∫–∞–ø–æ–º –Ω–µ –±—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º")
            
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞ —Å –±—ç–∫–∞–ø–æ–º: {e}")
        import traceback
        logger.error(traceback.format_exc())
        return False

def log_successful_processing(subject):
    """–õ–æ–≥–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∏—Å—å–º–∞"""
    try:
        log_file = '/opt/monitoring/logs/processed_emails.log'
        with open(log_file, 'a', encoding='utf-8') as f:
            timestamp = __import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            f.write(f"{timestamp} - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {subject}\n")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    sys.exit(main())