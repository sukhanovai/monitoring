# /opt/monitoring/email_processor.py

"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –ø–∏—Å–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è root
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –æ—Ç–≤–µ—Ç–æ–≤
"""

import sys
import os
import logging
import re
from email import message_from_string
from email.policy import default

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
sys.path.insert(0, '/opt/monitoring')

def setup_logging():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    try:
        os.makedirs('/opt/monitoring/logs', exist_ok=True)
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('/opt/monitoring/logs/email_processor.log'),
            ]
        )
        return logging.getLogger(__name__)
    except Exception as e:
        return logging.getLogger(__name__)

logger = setup_logging()

def parse_mbox_email(raw_email):
    """–ü–∞—Ä—Å–∏—Ç –ø–∏—Å—å–º–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ mbox –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Postfix"""
    try:
        # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É "From ..." –∫–æ—Ç–æ—Ä—É—é –¥–æ–±–∞–≤–ª—è–µ—Ç Postfix
        lines = raw_email.split('\n')
        if lines and lines[0].startswith('From '):
            email_content = '\n'.join(lines[1:])
        else:
            email_content = raw_email
        
        msg = message_from_string(email_content, policy=default)
        subject = msg.get('subject', '–ë–µ–∑ —Ç–µ–º—ã')
        from_email = msg.get('from', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å')
        
        logger.info(f"üì® –ü–∏—Å—å–º–æ: {subject} –æ—Ç {from_email}")
        
        return msg, subject, from_email, email_content
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return None, "–û—à–∏–±–∫–∞", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", raw_email

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º"""
    try:
        # –ß–∏—Ç–∞–µ–º –≤—Å–µ –∏–∑ STDIN
        raw_email = sys.stdin.read()
        
        if not raw_email or len(raw_email.strip()) < 10:
            return 0
            
        # –ü–∞—Ä—Å–∏–º –ø–∏—Å—å–º–æ
        msg, subject, from_email, email_content = parse_mbox_email(raw_email)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ Proxmox –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∞
        original_proxmox_email = extract_original_proxmox_email(email_content)
        
        if original_proxmox_email:
            logger.info("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ –æ—Ç Proxmox")
            process_proxmox_backup_email(original_proxmox_email)
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ –ø–∏—Å—å–º–æ –æ—Ç Proxmox
            is_proxmox = is_proxmox_email(subject, from_email, email_content)
            if is_proxmox:
                logger.info("üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä—è–º–æ–µ –ø–∏—Å—å–º–æ –æ—Ç Proxmox")
                process_proxmox_backup_email(email_content)
        
        return 0  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–≤
        
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞: {e}")
        return 0  # –í—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–≤–µ—Ç–æ–≤

def extract_original_proxmox_email(raw_email):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ Proxmox –∏–∑ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    try:
        if 'vzdump backup status' in raw_email and 'sr-pve' in raw_email:
            patterns = [
                r'Content-Type: multipart/alternative;\s*boundary="----_=_NextPart_\d+_\d+"',
                r'------_=_NextPart_\d+_\d+',
                r'Subject: vzdump backup status',
            ]
            
            for pattern in patterns:
                match = re.search(pattern, raw_email)
                if match:
                    return raw_email[match.start():]
        
        return None
    except Exception as e:
        return None

def is_proxmox_email(subject, from_email, raw_email):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∏—Å—å–º–æ –æ—Ç Proxmox"""
    subject_lower = str(subject).lower()
    from_lower = str(from_email).lower()
    raw_lower = raw_email.lower()
    
    return ('vzdump backup status' in subject_lower or
            'proxmox' in subject_lower or
            'pve' in from_lower or
            'bup' in from_lower or
            'vzdump' in raw_lower)

def process_proxmox_backup_email(raw_email):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∏—Å—å–º–æ —Å –±—ç–∫–∞–ø–æ–º –æ—Ç Proxmox"""
    try:
        from extensions.email_processor.core import EmailProcessorCore
        processor = EmailProcessorCore()
        result = processor.process_email(raw_email)
        
        if result:
            logger.info("‚úÖ –ü–∏—Å—å–º–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É")
        else:
            logger.warning("‚ö†Ô∏è –ü–∏—Å—å–º–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
        return result
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False

if __name__ == "__main__":
    sys.exit(main())
    