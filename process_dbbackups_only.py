#!/usr/bin/env python3
"""
–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø–∏—Å–µ–º —Å –±—ç–∫–∞–ø–∞–º–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
"""

import sys
sys.path.insert(0, '/opt/monitoring')

from improved_mail_monitor import BackupProcessor
import os
import shutil
import re

def process_database_backups_only():
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–∏—Å—å–º–∞ —Å –±—ç–∫–∞–ø–∞–º–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    
    maildir_cur = '/root/Maildir/cur'
    
    print("üóÉÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–∏—Å—å–º–∞ —Å –±—ç–∫–∞–ø–∞–º–∏ –ë–î...")
    
    if not os.path.exists(maildir_cur):
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è cur –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    emails = os.listdir(maildir_cur)
    print(f"üìß –í—Å–µ–≥–æ –ø–∏—Å–µ–º –≤ cur: {len(emails)}")
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    db_patterns = {
        'company': r'(\w+)_dump complete',
        'barnaul': r'cobian BRN backup (\w+), errors:(\d+)',
        'clients': r'kc-1c (\w+) dump complete', 
        'yandex': r'yandex (\w+) backup'
    }
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–∏—Å—å–º–∞ —Å –±—ç–∫–∞–ø–∞–º–∏ –ë–î
    db_emails = []
    for email_file in emails:
        file_path = os.path.join(maildir_cur, email_file)
        
        try:
            with open(file_path, 'rb') as f:
                from email import message_from_bytes
                import email.policy
                msg = message_from_bytes(f.read(), policy=email.policy.default)
            
            subject = msg.get('subject', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
            for db_type, pattern in db_patterns.items():
                match = re.search(pattern, subject, re.IGNORECASE)
                if match:
                    db_emails.append((email_file, subject, db_type))
                    break
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {email_file}: {e}")
    
    print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º —Å –±—ç–∫–∞–ø–∞–º–∏ –ë–î: {len(db_emails)}")
    
    if not db_emails:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–∏—Å–µ–º —Å –±—ç–∫–∞–ø–∞–º–∏ –ë–î")
        return
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    processor = BackupProcessor()
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∏—Å—å–º–∞
    processed_count = 0
    for email_file, subject, db_type in db_emails:
        file_path = os.path.join(maildir_cur, email_file)
        
        print(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {email_file}")
        print(f"   –¢–µ–º–∞: {subject}")
        print(f"   –¢–∏–ø: {db_type}")
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∏—Å—å–º–æ
        result = processor.parse_email_file(file_path)
        
        if result:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            processed_count += 1
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    print(f"üìä –ò—Ç–æ–≥: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –ø–∏—Å–µ–º —Å –±—ç–∫–∞–ø–∞–º–∏ –ë–î")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    check_database_after_db_processing()

def check_database_after_db_processing():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤ –ë–î"""
    import sqlite3
    
    db_path = '/opt/monitoring/data/backups.db'
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    print("\nüìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±—ç–∫–∞–ø–æ–≤ –ë–î:")
    
    # –ë—ç–∫–∞–ø—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('SELECT COUNT(*) FROM database_backups')
    db_count = cursor.fetchone()[0]
    print(f"   –ë—ç–∫–∞–ø–æ–≤ –ë–î: {db_count}")
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –±—ç–∫–∞–ø–æ–≤ –ë–î
    cursor.execute('''
        SELECT database_display_name, backup_status, backup_type, received_at 
        FROM database_backups 
        ORDER BY received_at DESC 
        LIMIT 10
    ''')
    recent_db = cursor.fetchall()
    
    print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã –ë–î:")
    for db in recent_db:
        name, status, btype, received = db
        print(f"     - {name}: {status} ({btype}) - {received}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    cursor.execute('''
        SELECT backup_type, COUNT(*) 
        FROM database_backups 
        GROUP BY backup_type
    ''')
    type_stats = cursor.fetchall()
    
    print("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º:")
    for btype, count in type_stats:
        print(f"     - {btype}: {count}")
    
    conn.close()

if __name__ == "__main__":
    process_database_backups_only()
    