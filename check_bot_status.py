#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –∏ –∫–æ–º–∞–Ω–¥
"""

import sys
sys.path.insert(0, '/opt/monitoring')

def check_bot_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    
    print("ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞...")
    
    try:
        from telegram import Bot
        from config import TELEGRAM_TOKEN
        
        bot = Bot(token=TELEGRAM_TOKEN)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        me = bot.get_me()
        print(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{me.username} ({me.first_name})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        commands = bot.get_my_commands()
        print(f"üìã –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥: {len(commands)}")
        
        # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É db_backups
        db_backups_found = False
        for cmd in commands:
            if cmd.command == 'db_backups':
                db_backups_found = True
                print(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ /db_backups –Ω–∞–π–¥–µ–Ω–∞: {cmd.description}")
                break
        
        if not db_backups_found:
            print("‚ùå –ö–æ–º–∞–Ω–¥–∞ /db_backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞—Ö")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞: {e}")
        return False

def test_database_backups_command():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é database_backups_command"""
    
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ database_backups_command...")
    
    try:
        from extensions.backup_monitor.bot_handler import database_backups_command, BackupMonitorBot
        
        # –°–æ–∑–¥–∞–µ–º mock –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        class MockUpdate:
            def __init__(self):
                self.message = MockMessage()
                
        class MockMessage:
            def __init__(self):
                self.chat_id = 1
                
            def reply_text(self, text, parse_mode=None, reply_markup=None):
                print(f"‚úÖ –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ ({len(text)} —Å–∏–º–≤–æ–ª–æ–≤)")
                if "–ë—ç–∫–∞–ø—ã –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö" in text:
                    print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –±—ç–∫–∞–ø–∞—Ö –ë–î")
                else:
                    print("‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ –±—ç–∫–∞–ø–∞—Ö –ë–î")
                return True
                
        class MockContext:
            def __init__(self):
                self.args = []
                
        update = MockUpdate()
        context = MockContext()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        print("üîπ –¢–µ—Å—Ç –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤:")
        database_backups_command(update, context)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
        print("üîπ –¢–µ—Å—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º 48:")
        context.args = ['48']
        database_backups_command(update, context)
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    check_bot_status()
    test_database_backups_command()
    