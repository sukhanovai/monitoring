# /opt/monitoring/test_email_processing.py

#!/usr/bin/env python3
"""
–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º —Å –±—ç–∫–∞–ø–∞–º–∏
"""

import sys
import os
import sqlite3
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, '/opt/monitoring')

def test_backup_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤...")
    
    db_path = '/opt/monitoring/data/backups.db'
    
    if not os.path.exists(db_path):
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='proxmox_backups'")
        table_exists = cursor.fetchone()
        
        if not table_exists:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ proxmox_backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        cursor.execute("SELECT COUNT(*) FROM proxmox_backups")
        count = cursor.fetchone()[0]
        
        cursor.execute("SELECT DISTINCT host_name FROM proxmox_backups LIMIT 5")
        hosts = cursor.fetchall()
        
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print(f"üìä –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: {count}")
        print(f"üè† –•–æ—Å—Ç—ã –≤ –±–∞–∑–µ: {[h[0] for h in hosts]}")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_sample_email_processing():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –ø–∏—Å—å–º–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞...")
    
    try:
        from extensions.email_processor.core import EmailProcessorCore
        
        # –ü—Ä–∏–º–µ—Ä –ø–∏—Å—å–º–∞ –æ—Ç Proxmox
        sample_email = """Subject: vzdump backup status (pve13): backup successful
From: root@pve13.localdomain
Date: Tue, 21 Oct 2024 03:00:01 +0300

Backup completed successfully
Duration: 02:15:30
Total size: 145.8GB
VMs: 12 successful, 0 failed
"""
        
        processor = EmailProcessorCore()
        result = processor.process_email(sample_email)
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å—å–º–∞: {'–£–°–ü–ï–•' if result else '–ù–ï–£–î–ê–ß–ê'}")
        return result
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å—å–º–∞: {e}")
        return False

def test_bot_commands():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞...")
    
    try:
        from extensions.backup_monitor.bot_handler import BackupMonitorBot
        
        bot = BackupMonitorBot()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        today = bot.get_today_status()
        hosts = bot.get_all_hosts()
        recent = bot.get_recent_backups(24)
        
        print(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —Ä–∞–±–æ—Ç–∞—é—Ç")
        print(f"üìä –î–∞–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è: {len(today)} –∑–∞–ø–∏—Å–µ–π")
        print(f"üè† –í—Å–µ–≥–æ —Ö–æ—Å—Ç–æ–≤: {len(hosts)}")
        print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã: {len(recent)} –∑–∞–ø–∏—Å–µ–π")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞: {e}")
        return False

def add_sample_data():
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É"""
    print("\nüìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        conn = sqlite3.connect('/opt/monitoring/data/backups.db')
        cursor = conn.cursor()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏
        test_data = [
            ('pve13', 'success', '02:15:30', '145.8GB', None, datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
            ('pve12', 'failed', '01:45:12', '89.2GB', 'Storage full', datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
            ('bup3', 'success', '03:22:45', '234.1GB', None, datetime.now().strftime('%Y-%m-%d %H:%M:%S')),
        ]
        
        for host, status, duration, size, error, received_at in test_data:
            cursor.execute('''
                INSERT OR REPLACE INTO proxmox_backups 
                (host_name, backup_status, duration, total_size, error_message, received_at)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (host, status, duration, size, error, received_at))
        
        conn.commit()
        conn.close()
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—ç–∫–∞–ø–æ–≤\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    db_ok = test_backup_database()
    
    if not db_ok:
        print("\nüîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        from init_email_system import init_databases
        init_databases()
        db_ok = test_backup_database()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞—è
    if db_ok:
        add_sample_data()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–∏—Å–µ–º
    email_ok = test_sample_email_processing()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    bot_ok = test_bot_commands()
    
    print(f"\nüìä –ò–¢–û–ì –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'–†–ê–ë–û–¢–ê–ï–¢' if db_ok else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∏—Å–µ–º: {'–†–ê–ë–û–¢–ê–ï–¢' if email_ok else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    print(f"‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {'–†–ê–ë–û–¢–ê–ï–¢' if bot_ok else '–ù–ï –†–ê–ë–û–¢–ê–ï–¢'}")
    
    if db_ok and bot_ok:
        print(f"\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /backup –≤ –±–æ—Ç–µ")
    else:
        print(f"\n‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞")
        