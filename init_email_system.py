# /opt/monitoring/init_email_system.py

#!/usr/bin/env python3
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º
"""

import sqlite3
import os

def init_databases():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ö–µ–º–æ–π"""
    
    print("üóÑÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ë–∞–∑–∞ –±—ç–∫–∞–ø–æ–≤ Proxmox
    conn = sqlite3.connect('/opt/monitoring/data/backups.db')
    cursor = conn.cursor()
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ö–µ–º–∞
    cursor.execute('DROP TABLE IF EXISTS proxmox_backups')
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS proxmox_backups (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            host_name TEXT NOT NULL,
            host_ip TEXT,
            backup_status TEXT NOT NULL,
            task_type TEXT,
            vm_count INTEGER DEFAULT 0,
            successful_vms INTEGER DEFAULT 0,
            failed_vms INTEGER DEFAULT 0,
            start_time TEXT,
            end_time TEXT,
            duration TEXT,
            total_size TEXT,
            error_message TEXT,
            email_subject TEXT,
            raw_subject TEXT,
            received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            UNIQUE(host_name, received_at)
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_proxmox_backups_host_date 
        ON proxmox_backups(host_name, received_at)
    ''')
    
    cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_proxmox_backups_status 
        ON proxmox_backups(backup_status, received_at)
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Proxmox –±—ç–∫–∞–ø–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ë–∞–∑–∞ ZFS —Å—Ç–∞—Ç—É—Å–æ–≤
    conn = sqlite3.connect('/opt/monitoring/data/zfs_status.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS zfs_pools (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            pool_name TEXT NOT NULL,
            status TEXT NOT NULL,
            health TEXT,
            size TEXT,
            used TEXT,
            available TEXT,
            scrub_date TEXT,
            reported_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ZFS —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ë–∞–∑–∞ –æ—Å—Ç–∞—Ç–∫–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤
    conn = sqlite3.connect('/opt/monitoring/data/inventory.db')
    cursor = conn.cursor()
    
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS inventory_items (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            product_id TEXT NOT NULL,
            product_name TEXT NOT NULL,
            quantity INTEGER,
            warehouse TEXT,
            report_date TEXT,
            received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    conn.commit()
    conn.close()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    print("üéØ –í—Å–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")

def create_directories():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    directories = [
        '/opt/monitoring/data/email_attachments',
        '/opt/monitoring/data/inventory_files',
        '/opt/monitoring/logs'
    ]
    
    for directory in directories:
        os.makedirs(directory, exist_ok=True)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")

if __name__ == "__main__":
    create_directories()
    init_databases()
    print("üéØ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    