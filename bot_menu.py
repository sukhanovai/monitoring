"""
Server Monitoring System v1.3.0
Copyright (c) 2024 Aleksandr Sukhanov
License: MIT
"""

from telegram import BotCommand, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackQueryHandler
from config import CHAT_IDS, TELEGRAM_TOKEN
from telegram import Bot
from extensions.backup_monitor.bot_handler import setup_backup_commands
from extensions.extension_manager import extension_manager, AVAILABLE_EXTENSIONS

import requests
import json

def setup_menu(bot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –±–æ—Ç–∞"""
    try:
        commands = [
            BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
            BotCommand("check", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã"),
            BotCommand("status", "–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"),
            BotCommand("servers", "–°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤"),
            BotCommand("report", "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç"),
            BotCommand("stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
            BotCommand("control", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"),
            BotCommand("diagnose_ssh", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ SSH"),
            BotCommand("silent", "–¢–∏—Ö–∏–π —Ä–µ–∂–∏–º"),
            BotCommand("extensions", "üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏"), 
            BotCommand("backup", "üìä –°—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤ Proxmox"),
            BotCommand("backup_search", "üîç –ü–æ–∏—Å–∫ –±—ç–∫–∞–ø–æ–≤ –ø–æ —Å–µ—Ä–≤–µ—Ä—É"),
            BotCommand("backup_help", "‚ùì –ü–æ–º–æ—â—å –ø–æ –±—ç–∫–∞–ø–∞–º"),
            BotCommand("help", "–ü–æ–º–æ—â—å")
        ]
        bot.set_my_commands(commands)
        print("‚úÖ –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–µ–Ω—é: {e}")
        return False

def check_access(chat_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É"""
    return str(chat_id) in CHAT_IDS

def start_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if not check_access(update.effective_chat.id):
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞")
        return

    keyboard = [
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä–≤–µ—Ä—ã", callback_data='manual_check')],
        [InlineKeyboardButton("‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞", callback_data='monitor_status')],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data='servers_list')],
        [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã", callback_data='check_resources')],
        [InlineKeyboardButton("üìä –ë—ç–∫–∞–ø—ã Proxmox", callback_data='backup_today')],
        [InlineKeyboardButton("üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏", callback_data='extensions_menu')],
        [InlineKeyboardButton("üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", callback_data='control_panel')],
        [InlineKeyboardButton("üîß –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data='diagnose_menu')],
        [InlineKeyboardButton("üîá –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º", callback_data='silent_status')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    welcome_text = (
        "ü§ñ *–°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - help*\n\n"
        "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\n\n"
        "üåê *–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:* http://192.168.20.2:5000\n"
        "_*–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏_"
    )
    update.message.reply_text(welcome_text, parse_mode='Markdown', reply_markup=reply_markup)

def help_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    if not check_access(update.effective_chat.id):
        return

    help_text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥—É*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "‚Ä¢ `/check` - –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
        "‚Ä¢ `/servers` - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
        "‚Ä¢ `/control` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º\n\n"
        "‚Ä¢ `/extensions` - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏\n\n"
        "*–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:*\n"
        "‚Ä¢ `/diagnose_ssh <ip>` - –ü—Ä–æ–≤–µ—Ä–∫–∞ SSH –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è\n"
        "‚Ä¢ `/silent` - –°—Ç–∞—Ç—É—Å —Ç–∏—Ö–æ–≥–æ —Ä–µ–∂–∏–º–∞\n\n"
        "*–û—Ç—á–µ—Ç—ã:*\n"
        "‚Ä¢ `/report` - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞\n"
        "‚Ä¢ `/stats` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã\n\n"
        "*–†–∞—Å—à–∏—Ä–µ–Ω–∏—è:*\n"
        "*–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:*\n"
        "üåê http://192.168.20.2:5000\n"
        "_*–¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏_\n\n"
        "*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è*"
    )
    update.message.reply_text(help_text, parse_mode='Markdown')

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥ (–∏–º–ø–æ—Ä—Ç—ã –≤–Ω—É—Ç—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤)
def check_command(update, context):
    from monitor_core import manual_check_handler
    return manual_check_handler(update, context)

def status_command(update, context):
    from monitor_core import monitor_status
    return monitor_status(update, context)

def silent_command(update, context):
    from monitor_core import silent_command as silent_cmd
    return silent_cmd(update, context)

def control_command(update, context):
    from monitor_core import control_command as control_cmd
    return control_cmd(update, context)

def servers_command(update, context):
    from extensions.server_list import servers_command as servers_cmd
    return servers_cmd(update, context)

def report_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    from monitor_core import send_morning_report_handler
    return send_morning_report_handler(update, context)

def stats_command(update, context):
    from extensions.reports import stats_command as stats_cmd
    return stats_cmd(update, context)

def diagnose_ssh_command(update, context):
    from extensions.single_check import diagnose_ssh_command as diagnose_cmd
    return diagnose_cmd(update, context)

def backup_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /backup"""
    from extensions.backup_monitor.bot_handler import backup_command as backup_cmd
    return backup_cmd(update, context)

def backup_search_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /backup_search"""
    from extensions.backup_monitor.bot_handler import backup_search_command as backup_search_cmd
    return backup_search_cmd(update, context)

def backup_help_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /backup_help"""
    from extensions.backup_monitor.bot_handler import backup_help_command as backup_help_cmd
    return backup_help_cmd(update, context)

def fix_monitor_command(update, context):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    if not check_access(update.effective_chat.id):
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    try:
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        from monitor_core import server_status
        from datetime import datetime

        monitor_server_ip = "192.168.20.2"

        if monitor_server_ip in server_status:
            server_status[monitor_server_ip]["last_up"] = datetime.now()
            server_status[monitor_server_ip]["alert_sent"] = False

            update.message.reply_text("‚úÖ –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            bot = Bot(token=TELEGRAM_TOKEN)
            for chat_id in CHAT_IDS:
                bot.send_message(chat_id=chat_id, text="üîß –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
        else:
            update.message.reply_text("‚ùå –°–µ—Ä–≤–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")

    except Exception as e:
        update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        import traceback
        print(f"–û—à–∏–±–∫–∞ –≤ fix_monitor_command: {traceback.format_exc()}")

def extensions_command(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extensions"""
    if not check_access(update.effective_chat.id):
        update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞")
        return
    
    show_extensions_menu(update, context)

def show_extensions_menu(update, context):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏"""
    from telegram import InlineKeyboardMarkup, InlineKeyboardButton
    
    query = update.callback_query
    chat_id = query.message.chat_id if query else update.message.chat_id
    
    extensions_status = extension_manager.get_extensions_status()
    
    message = "üõ†Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏*\n\n"
    message += "üìä *–°—Ç–∞—Ç—É—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π:*\n\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = []
    
    for ext_id, status_info in extensions_status.items():
        enabled = status_info['enabled']
        ext_info = status_info['info']
        
        status_icon = "üü¢" if enabled else "üî¥"
        toggle_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if enabled else "üü¢ –í–∫–ª—é—á–∏—Ç—å"
        
        message += f"{status_icon} *{ext_info['name']}*\n"
        message += f"   {ext_info['description']}\n"
        message += f"   –°—Ç–∞—Ç—É—Å: {'–í–∫–ª—é—á–µ–Ω–æ' if enabled else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        keyboard.append([
            InlineKeyboardButton(
                f"{toggle_text} {ext_info['name']}", 
                callback_data=f'ext_toggle_{ext_id}'
            )
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    keyboard.extend([
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data='extensions_refresh')],
        [InlineKeyboardButton("üìä –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data='ext_enable_all')],
        [InlineKeyboardButton("üìã –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ", callback_data='ext_disable_all')],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='monitor_status')]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if query:
        query.edit_message_text(
            text=message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    else:
        update.message.reply_text(
            text=message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )

def extensions_callback_handler(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–æ–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏"""
    query = update.callback_query
    query.answer()
    
    data = query.data
    
    if data == 'extensions_refresh':
        show_extensions_menu(update, context)
    
    elif data == 'ext_enable_all':
        enable_all_extensions(update, context)
    
    elif data == 'ext_disable_all':
        disable_all_extensions(update, context)
    
    elif data.startswith('ext_toggle_'):
        extension_id = data.replace('ext_toggle_', '')
        toggle_extension(update, context, extension_id)

def toggle_extension(update, context, extension_id):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ"""
    query = update.callback_query
    
    success, message = extension_manager.toggle_extension(extension_id)
    
    if success:
        query.answer(message)
        show_extensions_menu(update, context)
    else:
        query.answer(message, show_alert=True)

def enable_all_extensions(update, context):
    """–í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
    query = update.callback_query
    
    enabled_count = 0
    for ext_id in AVAILABLE_EXTENSIONS:
        success, _ = extension_manager.enable_extension(ext_id)
        if success:
            enabled_count += 1
    
    query.answer(f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ {enabled_count}/{len(AVAILABLE_EXTENSIONS)} —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π")
    show_extensions_menu(update, context)

def disable_all_extensions(update, context):
    """–û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è"""
    query = update.callback_query
    
    disabled_count = 0
    for ext_id in AVAILABLE_EXTENSIONS:
        success, _ = extension_manager.disable_extension(ext_id)
        if success:
            disabled_count += 1
    
    query.answer(f"‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ {disabled_count}/{len(AVAILABLE_EXTENSIONS)} —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π")
    show_extensions_menu(update, context)

def get_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞"""
    return [
        CommandHandler("start", start_command),
        CommandHandler("help", help_command),
        CommandHandler("check", check_command),
        CommandHandler("status", status_command),
        CommandHandler("servers", servers_command),
        CommandHandler("silent", silent_command),
        CommandHandler("report", report_command),
        CommandHandler("stats", stats_command),
        CommandHandler("control", control_command),
        CommandHandler("diagnose_ssh", diagnose_ssh_command),
        CommandHandler("extensions", extensions_command),
        CommandHandler("fix_monitor", fix_monitor_command),
        CommandHandler("backup", backup_command),
        CommandHandler("backup_search", backup_search_command),
        CommandHandler("backup_help", backup_help_command),
    ]

def lazy_handler(pattern):
    """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    def wrapper(update, context):
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ
        if pattern == 'manual_check':
            from monitor_core import manual_check_handler as handler
        elif pattern == 'monitor_status':
            from monitor_core import monitor_status as handler
        elif pattern == 'silent_status':
            from monitor_core import silent_status_handler as handler
        elif pattern == 'pause_monitoring':
            from monitor_core import pause_monitoring_handler as handler
        elif pattern == 'resume_monitoring':
            from monitor_core import resume_monitoring_handler as handler
        elif pattern == 'check_resources':
            from monitor_core import check_resources_handler as handler
        elif pattern == 'control_panel':
            from monitor_core import control_panel_handler as handler
        elif pattern == 'daily_report':
            from monitor_core import send_morning_report_handler as handler
        elif pattern == 'diagnose_menu':
            from monitor_core import diagnose_menu_handler as handler
        elif pattern == 'close':
            from monitor_core import close_menu as handler
        elif pattern == 'force_silent':
            from monitor_core import force_silent_handler as handler
        elif pattern == 'force_loud':
            from monitor_core import force_loud_handler as handler
        elif pattern == 'auto_mode':
            from monitor_core import auto_mode_handler as handler
        elif pattern == 'toggle_silent':
            from monitor_core import toggle_silent_mode_handler as handler
        elif pattern == 'servers_list':
            from extensions.server_list import servers_list_handler as handler
        elif pattern == 'full_report':
            from monitor_core import send_morning_report_handler as handler
        elif pattern == 'resource_page':
            from monitor_core import resource_page_handler as handler
        elif pattern == 'refresh_resources':
            from monitor_core import refresh_resources_handler as handler
        elif pattern == 'close_resources':
            from monitor_core import close_resources_handler as handler
        # –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        elif pattern == 'check_linux':
            from monitor_core import check_linux_resources_handler as handler
        elif pattern == 'check_windows':
            from monitor_core import check_windows_resources_handler as handler
        elif pattern == 'check_other':
            from monitor_core import check_other_resources_handler as handler
        elif pattern == 'check_all_resources':
            from monitor_core import check_all_resources_handler as handler
        # –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ó–î–ï–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò –†–ï–°–£–†–°–û–í
        elif pattern == 'check_cpu':
            from monitor_core import check_cpu_resources_handler as handler
        elif pattern == 'check_ram':
            from monitor_core import check_ram_resources_handler as handler
        elif pattern == 'check_disk':
            from monitor_core import check_disk_resources_handler as handler
        elif pattern == 'resource_history':
            from monitor_core import resource_history_command as handler
        elif pattern == 'debug_report':
            from monitor_core import debug_morning_report as handler
        elif pattern == 'backup_today':
            from extensions.backup_monitor.bot_handler import backup_callback as handler
            return handler(update, context)
        elif pattern == 'backup_24h':
            from extensions.backup_monitor.bot_handler import backup_callback as handler
            return handler(update, context)
        elif pattern == 'backup_failed':
            from extensions.backup_monitor.bot_handler import backup_callback as handler
            return handler(update, context)
        elif pattern == 'backup_hosts':
            from extensions.backup_monitor.bot_handler import backup_callback as handler
            return handler(update, context)
        elif pattern == 'backup_refresh':
            from extensions.backup_monitor.bot_handler import backup_callback as handler
            return handler(update, context)
        elif pattern.startswith('backup_host_'):
            from extensions.backup_monitor.bot_handler import backup_callback as handler
            return handler(update, context)
        elif pattern == 'extensions_menu':
            from bot_menu import show_extensions_menu as handler
        elif pattern == 'extensions_refresh':
            from bot_menu import show_extensions_menu as handler
        elif pattern == 'ext_enable_all':
            from bot_menu import enable_all_extensions as handler
        elif pattern == 'ext_disable_all':
            from bot_menu import disable_all_extensions as handler
        else:
            def default_handler(update, context):
                query = update.callback_query
                query.answer()
                query.edit_message_text("‚ùå –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return default_handler(update, context)

        return handler(update, context)
    return wrapper

def get_callback_handlers():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ —Å –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π"""
    return [
        CallbackQueryHandler(lambda u, c: lazy_handler('manual_check')(u, c), pattern='^manual_check$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('monitor_status')(u, c), pattern='^monitor_status$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('servers_list')(u, c), pattern='^servers_list$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('silent_status')(u, c), pattern='^silent_status$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('pause_monitoring')(u, c), pattern='^pause_monitoring$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('resume_monitoring')(u, c), pattern='^resume_monitoring$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('check_resources')(u, c), pattern='^check_resources$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('control_panel')(u, c), pattern='^control_panel$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('daily_report')(u, c), pattern='^daily_report$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('diagnose_menu')(u, c), pattern='^diagnose_menu$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('close')(u, c), pattern='^close$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('full_report')(u, c), pattern='^full_report$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('force_silent')(u, c), pattern='^force_silent$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('force_loud')(u, c), pattern='^force_loud$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('auto_mode')(u, c), pattern='^auto_mode$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('toggle_silent')(u, c), pattern='^toggle_silent$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('resource_history')(u, c), pattern='^resource_history$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('debug_report')(u, c), pattern='^debug_report$'),
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
        CallbackQueryHandler(lambda u, c: lazy_handler('resource_page')(u, c), pattern='^resource_page_'),
        CallbackQueryHandler(lambda u, c: lazy_handler('refresh_resources')(u, c), pattern='^refresh_resources$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('close_resources')(u, c), pattern='^close_resources$'),
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ç–∏–ø–∞–º —Å–µ—Ä–≤–µ—Ä–æ–≤
        CallbackQueryHandler(lambda u, c: lazy_handler('check_linux')(u, c), pattern='^check_linux$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('check_windows')(u, c), pattern='^check_windows$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('check_other')(u, c), pattern='^check_other$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('check_all_resources')(u, c), pattern='^check_all_resources$'),
        
        # –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ê–ó–î–ï–õ–¨–ù–û–ô –ü–†–û–í–ï–†–ö–ò –†–ï–°–£–†–°–û–í
        CallbackQueryHandler(lambda u, c: lazy_handler('check_cpu')(u, c), pattern='^check_cpu$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('check_ram')(u, c), pattern='^check_ram$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('check_disk')(u, c), pattern='^check_disk$'),

        # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ë–≠–ö–ê–ü–û–í
        CallbackQueryHandler(lambda u, c: lazy_handler('backup_today')(u, c), pattern='^backup_today$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('backup_24h')(u, c), pattern='^backup_24h$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('backup_failed')(u, c), pattern='^backup_failed$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('backup_hosts')(u, c), pattern='^backup_hosts$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('backup_refresh')(u, c), pattern='^backup_refresh$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('backup_host_')(u, c), pattern='^backup_host_'),
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π
        CallbackQueryHandler(lambda u, c: lazy_handler('extensions_menu')(u, c), pattern='^extensions_menu$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('extensions_refresh')(u, c), pattern='^extensions_refresh$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('ext_enable_all')(u, c), pattern='^ext_enable_all$'),
        CallbackQueryHandler(lambda u, c: lazy_handler('ext_disable_all')(u, c), pattern='^ext_disable_all$'),
        CallbackQueryHandler(lambda u, c: extensions_callback_handler(u, c), pattern='^ext_toggle_'),
    ]
