#!/usr/bin/env python3
"""
–ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
"""

import sys
sys.path.insert(0, '/opt/monitoring')

def debug_callback_handlers():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    
    print("üîç –ì–ª—É–±–æ–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤...")
    
    try:
        from bot_menu import get_callback_handlers
        
        handlers = get_callback_handlers()
        print(f"‚úÖ –í—Å–µ–≥–æ callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(handlers)}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        db_patterns = []
        other_patterns = []
        
        for handler in handlers:
            if hasattr(handler, 'pattern'):
                pattern_str = str(handler.pattern.pattern)
                if 'db_backups' in pattern_str:
                    db_patterns.append(pattern_str)
                else:
                    other_patterns.append(pattern_str)
        
        print(f"\nüìã –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ db_backups ({len(db_patterns)}):")
        for pattern in db_patterns:
            print(f"   ‚úÖ {pattern}")
            
        print(f"\nüìã –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ({len(other_patterns)}):")
        for pattern in other_patterns[:10]:  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   - {pattern}")
            
        if len(db_patterns) == 0:
            print("\n‚ùå –ù–ï–¢ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è db_backups!")
            
        return len(db_patterns) > 0
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_callback_directly():
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç callback –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    print("\nüß™ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç callback –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
    
    try:
        from extensions.backup_monitor.bot_handler import backup_callback
        
        # –°–æ–∑–¥–∞–µ–º mock callback update
        class MockUpdate:
            def __init__(self, data):
                self.callback_query = MockCallbackQuery(data)
                
        class MockCallbackQuery:
            def __init__(self, data):
                self.data = data
            def answer(self, text=None):
                print(f"   üì® Callback answer: {text}")
            def edit_message_text(self, text, parse_mode=None, reply_markup=None):
                print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {text[:100]}...")
                return True
                
        class MockContext:
            pass
            
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ callback'—ã
        test_callbacks = [
            'db_backups_24h',
            'db_backups_48h', 
            'backup_today'
        ]
        
        for callback_data in test_callbacks:
            print(f"\nüîπ –¢–µ—Å—Ç callback: {callback_data}")
            update = MockUpdate(callback_data)
            context = MockContext()
            
            try:
                backup_callback(update, context)
                print("   ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
                
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    debug_callback_handlers()
    test_callback_directly()
    