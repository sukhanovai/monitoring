#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã database_backups
"""

import sqlite3
import os

def create_database_backups_table():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    
    db_path = '/opt/monitoring/data/backups.db'
    
    print(f"üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É database_backups –≤ {db_path}")
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS database_backups (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            host_name TEXT NOT NULL,
            database_name TEXT NOT NULL,
            database_display_name TEXT,
            backup_status TEXT NOT NULL,
            backup_type TEXT,
            task_type TEXT,
            error_count INTEGER DEFAULT 0,
            email_subject TEXT,
            received_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    cursor.execute('''
        CREATE INDEX IF NOT EXISTS idx_db_backups_type_date 
        ON database_backups(backup_type, received_at)
    ''')
    
    conn.commit()
    conn.close()
    
    print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ database_backups —Å–æ–∑–¥–∞–Ω–∞")

def check_table_exists():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
    db_path = '/opt/monitoring/data/backups.db'
    
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='database_backups'")
    table_exists = cursor.fetchone()
    
    conn.close()
    
    if table_exists:
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ database_backups —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    else:
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ database_backups –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return False

if __name__ == "__main__":
    create_database_backups_table()
    check_table_exists()
    